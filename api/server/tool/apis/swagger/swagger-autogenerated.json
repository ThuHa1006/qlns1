{
  "swagger": "2.0",
  "info": {
    "description": "Create APIs at the speed of your thoughts",
    "version": "1.0.0",
    "title": "XgeneCloud",
    "contact": {}
  },
  "host": "localhost:8080",
  "basePath": "/",
  "tags": [
    {
      "name": "common"
    },
    {
      "name": "Authentication",
      "description": "Everything about User Authentication"
    },
    {
      "name": "bo_phan",
      "description": "Everything about your bo_phan"
    },
    {
      "name": "cap_bac",
      "description": "Everything about your cap_bac"
    },
    {
      "name": "cham_cong",
      "description": "Everything about your cham_cong"
    },
    {
      "name": "chinh_sach",
      "description": "Everything about your chinh_sach"
    },
    {
      "name": "don_tu",
      "description": "Everything about your don_tu"
    },
    {
      "name": "giay_to",
      "description": "Everything about your giay_to"
    },
    {
      "name": "he_so",
      "description": "Everything about your he_so"
    },
    {
      "name": "ho_so_ca_nhan",
      "description": "Everything about your ho_so_ca_nhan"
    },
    {
      "name": "hop_dong",
      "description": "Everything about your hop_dong"
    },
    {
      "name": "loai_don_tu",
      "description": "Everything about your loai_don_tu"
    },
    {
      "name": "loai_he_so",
      "description": "Everything about your loai_he_so"
    },
    {
      "name": "loai_hop_dong",
      "description": "Everything about your loai_hop_dong"
    },
    {
      "name": "loai_phu_cap",
      "description": "Everything about your loai_phu_cap"
    },
    {
      "name": "loai_quyet_dinh",
      "description": "Everything about your loai_quyet_dinh"
    },
    {
      "name": "nghi_phep",
      "description": "Everything about your nghi_phep"
    },
    {
      "name": "nguoi_dung",
      "description": "Everything about your nguoi_dung"
    },
    {
      "name": "nhan_vien",
      "description": "Everything about your nhan_vien"
    },
    {
      "name": "nhom_nguoi_dung",
      "description": "Everything about your nhom_nguoi_dung"
    },
    {
      "name": "phieu_danh_gia",
      "description": "Everything about your phieu_danh_gia"
    },
    {
      "name": "phieu_luong",
      "description": "Everything about your phieu_luong"
    },
    {
      "name": "phu_cap",
      "description": "Everything about your phu_cap"
    },
    {
      "name": "quyet_dinh",
      "description": "Everything about your quyet_dinh"
    },
    {
      "name": "tam_ung",
      "description": "Everything about your tam_ung"
    },
    {
      "name": "tang_ca",
      "description": "Everything about your tang_ca"
    },
    {
      "name": "trang_thai",
      "description": "Everything about your trang_thai"
    },
    {
      "name": "tuyen_dung",
      "description": "Everything about your tuyen_dung"
    },
    {
      "name": "vi_tri",
      "description": "Everything about your vi_tri"
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/health": {
      "get": {
        "tags": [
          "common"
        ],
        "summary": "Get server health",
        "description": "",
        "operationId": "health",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "process_uptime": "282.6 Seconds",
                "process_memory_usage": {
                  "rss": "46.73 MB",
                  "heapTotal": "24.62 MB",
                  "heapUsed": "19.74 MB",
                  "external": "1.59 MB"
                },
                "os_total_memory": "16384.00 MB",
                "os_free_memory": "826.23 MB",
                "os_load_average": [
                  "3.51",
                  "3.36",
                  "3.24"
                ],
                "v8_heap_statistics": {
                  "total_heap_size": "24.62 MB",
                  "total_heap_size_executable": "0.80 MB",
                  "total_physical_size": "22.25 MB",
                  "total_available_size": "2075.67 MB",
                  "used_heap_size": "19.75 MB",
                  "heap_size_limit": "2096.00 MB",
                  "malloced_memory": "0.09 MB",
                  "peak_malloced_memory": "10.10 MB",
                  "does_zap_garbage": 0,
                  "number_of_native_contexts": 2,
                  "number_of_detached_contexts": 0
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/signin": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "User login",
        "description": "",
        "operationId": "login",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Authentication user details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userAuth"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Authenticated successfully",
            "schema": {
              "$ref": "#/definitions/user"
            }
          }
        }
      }
    },
    "/api/v1/auth/signup": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "User signup",
        "description": "",
        "operationId": "signup",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Signup user details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/user"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Registration success",
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/auth/signout": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "User logout",
        "description": "",
        "operationId": "logout",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Logout success"
          }
        }
      }
    },
    "/api/v1/auth/password/forgot": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Password Forgot",
        "description": "",
        "operationId": "passwordForgot",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Signup user details",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "required": true,
                  "example": "test@xgenecloud.com"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Registration success",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/auth/email/validate/{tokenId}": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Email validate link",
        "description": "",
        "operationId": "emailValidate",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tokenId",
            "in": "path",
            "description": "random token id received",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Validated successfully"
          }
        }
      }
    },
    "/api/v1/auth/token/validate/{tokenId}": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Validate password reset token",
        "description": "",
        "operationId": "passwordResetTokenValidate",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tokenId",
            "in": "path",
            "description": "random token id received",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Validated successfully"
          }
        }
      }
    },
    "/api/v1/auth/password/reset/": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Password reset",
        "description": "",
        "operationId": "passwordReset",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tokenId",
            "in": "path",
            "description": "random token id received",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Reset password details",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "password": {
                  "type": "string",
                  "format": "password",
                  "example": "password",
                  "required": true
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Password reset successfully"
          }
        }
      }
    },
    "/api/v1/user/me": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "USer details",
        "description": "",
        "operationId": "userDetails",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "User details"
          }
        }
      }
    },
    "/api/v1/user": {
      "put": {
        "tags": [
          "Authentication"
        ],
        "summary": "Update user details",
        "description": "",
        "operationId": "updateUserDetails",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "User details"
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Updated user details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/user"
            }
          }
        ]
      }
    },
    "/api/v1/user/password/change": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Update user details",
        "description": "",
        "operationId": "passwordChange",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "User details"
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Current password and new password",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "currentPassword": {
                  "type": "string",
                  "format": "password",
                  "example": "password"
                },
                "newPassword": {
                  "type": "string",
                  "format": "password",
                  "example": "newPassword"
                }
              }
            }
          }
        ]
      }
    },
    "/api/v1/auth/google": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Google authentication url",
        "description": "",
        "operationId": "googleAuthentication"
      }
    },
    "/api/v1/auth/facebook": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Facebook authentication url",
        "description": "",
        "operationId": "facebookAuthentication"
      }
    },
    "/api/v1/auth/google/callback": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Google authentication callback url",
        "description": "",
        "operationId": "googleAuthenticationCallback"
      }
    },
    "/api/v1/auth/facebook/callback": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Facebook authentication callback url",
        "description": "",
        "operationId": "facebookAuthenticationCallback"
      }
    },
    "/api/v1/bo_phan": {
      "post": {
        "tags": [
          "bo_phan"
        ],
        "summary": "Add a new bo_phan",
        "description": "",
        "operationId": "addbo_phan",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "bo_phan object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/bo_phan"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "bo_phan"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getbo_phan",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/bo_phan/{bo_phanId}": {
      "get": {
        "tags": [
          "bo_phan"
        ],
        "summary": "Find bo_phan by ID",
        "description": "Returns a single bo_phan",
        "operationId": "getbo_phanById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "bo_phanId",
            "in": "path",
            "description": "ID of bo_phan to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/bo_phan"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "bo_phan not found"
          }
        }
      },
      "put": {
        "tags": [
          "bo_phan"
        ],
        "summary": "Updates a bo_phan",
        "description": "",
        "operationId": "updatebo_phan",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "bo_phanId",
            "in": "path",
            "description": "ID of bo_phan to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "bo_phan object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/bo_phan"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "bo_phan"
        ],
        "summary": "Deletes a bo_phan",
        "description": "",
        "operationId": "deletebo_phan",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "bo_phanId",
            "in": "path",
            "description": "ID of bo_phan to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "bo_phan not found"
          }
        }
      }
    },
    "/api/v1/bo_phan/bulk": {
      "post": {
        "tags": [
          "bo_phan"
        ],
        "summary": "Bulk bo_phan insert",
        "description": "",
        "operationId": "bulkbo_phanInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "bo_phan objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/bo_phan"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "bo_phan"
        ],
        "summary": "Updates a bo_phan",
        "description": "",
        "operationId": "updatebo_phan",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "bo_phan objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/bo_phan"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "bo_phan"
        ],
        "summary": "Deletes a bo_phan",
        "description": "",
        "operationId": "deletebo_phan",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "bo_phan objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/bo_phan"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "bo_phan not found"
          }
        }
      }
    },
    "/api/v1/bo_phan/findOne": {
      "get": {
        "tags": [
          "bo_phan"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnebo_phan",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/bo_phan"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/bo_phan/{bo_phanId}/exists": {
      "get": {
        "tags": [
          "bo_phan"
        ],
        "summary": "Check bo_phan with provided ID exists",
        "description": "Returns a single bo_phan",
        "operationId": "checkbo_phanExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "bo_phanId",
            "in": "path",
            "description": "ID of bo_phan",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/bo_phan/count": {
      "get": {
        "tags": [
          "bo_phan"
        ],
        "summary": "Get bo_phan count",
        "operationId": "getbo_phanCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/bo_phan/groupby/{columnName}": {
      "get": {
        "tags": [
          "bo_phan"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "bo_phanGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/bo_phan"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/bo_phan/distribution/{columnName}": {
      "get": {
        "tags": [
          "bo_phan"
        ],
        "summary": "",
        "description": "",
        "operationId": "bo_phanDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/bo_phan/distinct/{columnName}": {
      "get": {
        "tags": [
          "bo_phan"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "bo_phanDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/bo_phan/aggregate/{columnName}": {
      "get": {
        "tags": [
          "bo_phan"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "bo_phanAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/bo_phan"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/cap_bac": {
      "post": {
        "tags": [
          "cap_bac"
        ],
        "summary": "Add a new cap_bac",
        "description": "",
        "operationId": "addcap_bac",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "cap_bac object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/cap_bac"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "cap_bac"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getcap_bac",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/cap_bac/{cap_bacId}": {
      "get": {
        "tags": [
          "cap_bac"
        ],
        "summary": "Find cap_bac by ID",
        "description": "Returns a single cap_bac",
        "operationId": "getcap_bacById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "cap_bacId",
            "in": "path",
            "description": "ID of cap_bac to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/cap_bac"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "cap_bac not found"
          }
        }
      },
      "put": {
        "tags": [
          "cap_bac"
        ],
        "summary": "Updates a cap_bac",
        "description": "",
        "operationId": "updatecap_bac",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "cap_bacId",
            "in": "path",
            "description": "ID of cap_bac to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "cap_bac object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/cap_bac"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "cap_bac"
        ],
        "summary": "Deletes a cap_bac",
        "description": "",
        "operationId": "deletecap_bac",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "cap_bacId",
            "in": "path",
            "description": "ID of cap_bac to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "cap_bac not found"
          }
        }
      }
    },
    "/api/v1/cap_bac/bulk": {
      "post": {
        "tags": [
          "cap_bac"
        ],
        "summary": "Bulk cap_bac insert",
        "description": "",
        "operationId": "bulkcap_bacInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "cap_bac objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cap_bac"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "cap_bac"
        ],
        "summary": "Updates a cap_bac",
        "description": "",
        "operationId": "updatecap_bac",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "cap_bac objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cap_bac"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "cap_bac"
        ],
        "summary": "Deletes a cap_bac",
        "description": "",
        "operationId": "deletecap_bac",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "cap_bac objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cap_bac"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "cap_bac not found"
          }
        }
      }
    },
    "/api/v1/cap_bac/findOne": {
      "get": {
        "tags": [
          "cap_bac"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnecap_bac",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/cap_bac"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/cap_bac/{cap_bacId}/exists": {
      "get": {
        "tags": [
          "cap_bac"
        ],
        "summary": "Check cap_bac with provided ID exists",
        "description": "Returns a single cap_bac",
        "operationId": "checkcap_bacExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "cap_bacId",
            "in": "path",
            "description": "ID of cap_bac",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/cap_bac/count": {
      "get": {
        "tags": [
          "cap_bac"
        ],
        "summary": "Get cap_bac count",
        "operationId": "getcap_bacCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/cap_bac/groupby/{columnName}": {
      "get": {
        "tags": [
          "cap_bac"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "cap_bacGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/cap_bac"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/cap_bac/distribution/{columnName}": {
      "get": {
        "tags": [
          "cap_bac"
        ],
        "summary": "",
        "description": "",
        "operationId": "cap_bacDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/cap_bac/distinct/{columnName}": {
      "get": {
        "tags": [
          "cap_bac"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "cap_bacDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/cap_bac/aggregate/{columnName}": {
      "get": {
        "tags": [
          "cap_bac"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "cap_bacAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/cap_bac"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/cham_cong": {
      "post": {
        "tags": [
          "cham_cong"
        ],
        "summary": "Add a new cham_cong",
        "description": "",
        "operationId": "addcham_cong",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "cham_cong object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/cham_cong"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "cham_cong"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getcham_cong",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/cham_cong/{cham_congId}": {
      "get": {
        "tags": [
          "cham_cong"
        ],
        "summary": "Find cham_cong by ID",
        "description": "Returns a single cham_cong",
        "operationId": "getcham_congById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "cham_congId",
            "in": "path",
            "description": "ID of cham_cong to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/cham_cong"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "cham_cong not found"
          }
        }
      },
      "put": {
        "tags": [
          "cham_cong"
        ],
        "summary": "Updates a cham_cong",
        "description": "",
        "operationId": "updatecham_cong",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "cham_congId",
            "in": "path",
            "description": "ID of cham_cong to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "cham_cong object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/cham_cong"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "cham_cong"
        ],
        "summary": "Deletes a cham_cong",
        "description": "",
        "operationId": "deletecham_cong",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "cham_congId",
            "in": "path",
            "description": "ID of cham_cong to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "cham_cong not found"
          }
        }
      }
    },
    "/api/v1/cham_cong/bulk": {
      "post": {
        "tags": [
          "cham_cong"
        ],
        "summary": "Bulk cham_cong insert",
        "description": "",
        "operationId": "bulkcham_congInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "cham_cong objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cham_cong"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "cham_cong"
        ],
        "summary": "Updates a cham_cong",
        "description": "",
        "operationId": "updatecham_cong",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "cham_cong objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cham_cong"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "cham_cong"
        ],
        "summary": "Deletes a cham_cong",
        "description": "",
        "operationId": "deletecham_cong",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "cham_cong objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cham_cong"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "cham_cong not found"
          }
        }
      }
    },
    "/api/v1/cham_cong/findOne": {
      "get": {
        "tags": [
          "cham_cong"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnecham_cong",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/cham_cong"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/cham_cong/{cham_congId}/exists": {
      "get": {
        "tags": [
          "cham_cong"
        ],
        "summary": "Check cham_cong with provided ID exists",
        "description": "Returns a single cham_cong",
        "operationId": "checkcham_congExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "cham_congId",
            "in": "path",
            "description": "ID of cham_cong",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/cham_cong/count": {
      "get": {
        "tags": [
          "cham_cong"
        ],
        "summary": "Get cham_cong count",
        "operationId": "getcham_congCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/cham_cong/groupby/{columnName}": {
      "get": {
        "tags": [
          "cham_cong"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "cham_congGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/cham_cong"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/cham_cong/distribution/{columnName}": {
      "get": {
        "tags": [
          "cham_cong"
        ],
        "summary": "",
        "description": "",
        "operationId": "cham_congDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/cham_cong/distinct/{columnName}": {
      "get": {
        "tags": [
          "cham_cong"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "cham_congDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/cham_cong/aggregate/{columnName}": {
      "get": {
        "tags": [
          "cham_cong"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "cham_congAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/cham_cong"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/chinh_sach": {
      "post": {
        "tags": [
          "chinh_sach"
        ],
        "summary": "Add a new chinh_sach",
        "description": "",
        "operationId": "addchinh_sach",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "chinh_sach object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/chinh_sach"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "chinh_sach"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getchinh_sach",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/chinh_sach/{chinh_sachId}": {
      "get": {
        "tags": [
          "chinh_sach"
        ],
        "summary": "Find chinh_sach by ID",
        "description": "Returns a single chinh_sach",
        "operationId": "getchinh_sachById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "chinh_sachId",
            "in": "path",
            "description": "ID of chinh_sach to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/chinh_sach"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "chinh_sach not found"
          }
        }
      },
      "put": {
        "tags": [
          "chinh_sach"
        ],
        "summary": "Updates a chinh_sach",
        "description": "",
        "operationId": "updatechinh_sach",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "chinh_sachId",
            "in": "path",
            "description": "ID of chinh_sach to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "chinh_sach object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/chinh_sach"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "chinh_sach"
        ],
        "summary": "Deletes a chinh_sach",
        "description": "",
        "operationId": "deletechinh_sach",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "chinh_sachId",
            "in": "path",
            "description": "ID of chinh_sach to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "chinh_sach not found"
          }
        }
      }
    },
    "/api/v1/chinh_sach/bulk": {
      "post": {
        "tags": [
          "chinh_sach"
        ],
        "summary": "Bulk chinh_sach insert",
        "description": "",
        "operationId": "bulkchinh_sachInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "chinh_sach objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/chinh_sach"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "chinh_sach"
        ],
        "summary": "Updates a chinh_sach",
        "description": "",
        "operationId": "updatechinh_sach",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "chinh_sach objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/chinh_sach"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "chinh_sach"
        ],
        "summary": "Deletes a chinh_sach",
        "description": "",
        "operationId": "deletechinh_sach",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "chinh_sach objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/chinh_sach"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "chinh_sach not found"
          }
        }
      }
    },
    "/api/v1/chinh_sach/findOne": {
      "get": {
        "tags": [
          "chinh_sach"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnechinh_sach",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/chinh_sach"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/chinh_sach/{chinh_sachId}/exists": {
      "get": {
        "tags": [
          "chinh_sach"
        ],
        "summary": "Check chinh_sach with provided ID exists",
        "description": "Returns a single chinh_sach",
        "operationId": "checkchinh_sachExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "chinh_sachId",
            "in": "path",
            "description": "ID of chinh_sach",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/chinh_sach/count": {
      "get": {
        "tags": [
          "chinh_sach"
        ],
        "summary": "Get chinh_sach count",
        "operationId": "getchinh_sachCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/chinh_sach/groupby/{columnName}": {
      "get": {
        "tags": [
          "chinh_sach"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "chinh_sachGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/chinh_sach"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/chinh_sach/distribution/{columnName}": {
      "get": {
        "tags": [
          "chinh_sach"
        ],
        "summary": "",
        "description": "",
        "operationId": "chinh_sachDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/chinh_sach/distinct/{columnName}": {
      "get": {
        "tags": [
          "chinh_sach"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "chinh_sachDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/chinh_sach/aggregate/{columnName}": {
      "get": {
        "tags": [
          "chinh_sach"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "chinh_sachAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/chinh_sach"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/don_tu": {
      "post": {
        "tags": [
          "don_tu"
        ],
        "summary": "Add a new don_tu",
        "description": "",
        "operationId": "adddon_tu",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "don_tu object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/don_tu"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "don_tu"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getdon_tu",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/don_tu/{don_tuId}": {
      "get": {
        "tags": [
          "don_tu"
        ],
        "summary": "Find don_tu by ID",
        "description": "Returns a single don_tu",
        "operationId": "getdon_tuById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "don_tuId",
            "in": "path",
            "description": "ID of don_tu to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/don_tu"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "don_tu not found"
          }
        }
      },
      "put": {
        "tags": [
          "don_tu"
        ],
        "summary": "Updates a don_tu",
        "description": "",
        "operationId": "updatedon_tu",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "don_tuId",
            "in": "path",
            "description": "ID of don_tu to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "don_tu object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/don_tu"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "don_tu"
        ],
        "summary": "Deletes a don_tu",
        "description": "",
        "operationId": "deletedon_tu",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "don_tuId",
            "in": "path",
            "description": "ID of don_tu to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "don_tu not found"
          }
        }
      }
    },
    "/api/v1/don_tu/bulk": {
      "post": {
        "tags": [
          "don_tu"
        ],
        "summary": "Bulk don_tu insert",
        "description": "",
        "operationId": "bulkdon_tuInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "don_tu objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/don_tu"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "don_tu"
        ],
        "summary": "Updates a don_tu",
        "description": "",
        "operationId": "updatedon_tu",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "don_tu objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/don_tu"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "don_tu"
        ],
        "summary": "Deletes a don_tu",
        "description": "",
        "operationId": "deletedon_tu",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "don_tu objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/don_tu"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "don_tu not found"
          }
        }
      }
    },
    "/api/v1/don_tu/findOne": {
      "get": {
        "tags": [
          "don_tu"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnedon_tu",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/don_tu"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/don_tu/{don_tuId}/exists": {
      "get": {
        "tags": [
          "don_tu"
        ],
        "summary": "Check don_tu with provided ID exists",
        "description": "Returns a single don_tu",
        "operationId": "checkdon_tuExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "don_tuId",
            "in": "path",
            "description": "ID of don_tu",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/don_tu/count": {
      "get": {
        "tags": [
          "don_tu"
        ],
        "summary": "Get don_tu count",
        "operationId": "getdon_tuCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/don_tu/groupby/{columnName}": {
      "get": {
        "tags": [
          "don_tu"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "don_tuGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/don_tu"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/don_tu/distribution/{columnName}": {
      "get": {
        "tags": [
          "don_tu"
        ],
        "summary": "",
        "description": "",
        "operationId": "don_tuDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/don_tu/distinct/{columnName}": {
      "get": {
        "tags": [
          "don_tu"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "don_tuDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/don_tu/aggregate/{columnName}": {
      "get": {
        "tags": [
          "don_tu"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "don_tuAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/don_tu"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/giay_to": {
      "post": {
        "tags": [
          "giay_to"
        ],
        "summary": "Add a new giay_to",
        "description": "",
        "operationId": "addgiay_to",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "giay_to object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/giay_to"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "giay_to"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getgiay_to",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/giay_to/{giay_toId}": {
      "get": {
        "tags": [
          "giay_to"
        ],
        "summary": "Find giay_to by ID",
        "description": "Returns a single giay_to",
        "operationId": "getgiay_toById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "giay_toId",
            "in": "path",
            "description": "ID of giay_to to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/giay_to"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "giay_to not found"
          }
        }
      },
      "put": {
        "tags": [
          "giay_to"
        ],
        "summary": "Updates a giay_to",
        "description": "",
        "operationId": "updategiay_to",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "giay_toId",
            "in": "path",
            "description": "ID of giay_to to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "giay_to object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/giay_to"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "giay_to"
        ],
        "summary": "Deletes a giay_to",
        "description": "",
        "operationId": "deletegiay_to",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "giay_toId",
            "in": "path",
            "description": "ID of giay_to to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "giay_to not found"
          }
        }
      }
    },
    "/api/v1/giay_to/bulk": {
      "post": {
        "tags": [
          "giay_to"
        ],
        "summary": "Bulk giay_to insert",
        "description": "",
        "operationId": "bulkgiay_toInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "giay_to objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/giay_to"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "giay_to"
        ],
        "summary": "Updates a giay_to",
        "description": "",
        "operationId": "updategiay_to",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "giay_to objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/giay_to"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "giay_to"
        ],
        "summary": "Deletes a giay_to",
        "description": "",
        "operationId": "deletegiay_to",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "giay_to objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/giay_to"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "giay_to not found"
          }
        }
      }
    },
    "/api/v1/giay_to/findOne": {
      "get": {
        "tags": [
          "giay_to"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnegiay_to",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/giay_to"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/giay_to/{giay_toId}/exists": {
      "get": {
        "tags": [
          "giay_to"
        ],
        "summary": "Check giay_to with provided ID exists",
        "description": "Returns a single giay_to",
        "operationId": "checkgiay_toExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "giay_toId",
            "in": "path",
            "description": "ID of giay_to",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/giay_to/count": {
      "get": {
        "tags": [
          "giay_to"
        ],
        "summary": "Get giay_to count",
        "operationId": "getgiay_toCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/giay_to/groupby/{columnName}": {
      "get": {
        "tags": [
          "giay_to"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "giay_toGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/giay_to"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/giay_to/distribution/{columnName}": {
      "get": {
        "tags": [
          "giay_to"
        ],
        "summary": "",
        "description": "",
        "operationId": "giay_toDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/giay_to/distinct/{columnName}": {
      "get": {
        "tags": [
          "giay_to"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "giay_toDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/giay_to/aggregate/{columnName}": {
      "get": {
        "tags": [
          "giay_to"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "giay_toAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/giay_to"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/he_so": {
      "post": {
        "tags": [
          "he_so"
        ],
        "summary": "Add a new he_so",
        "description": "",
        "operationId": "addhe_so",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "he_so object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/he_so"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "he_so"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "gethe_so",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/he_so/{he_soId}": {
      "get": {
        "tags": [
          "he_so"
        ],
        "summary": "Find he_so by ID",
        "description": "Returns a single he_so",
        "operationId": "gethe_soById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "he_soId",
            "in": "path",
            "description": "ID of he_so to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/he_so"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "he_so not found"
          }
        }
      },
      "put": {
        "tags": [
          "he_so"
        ],
        "summary": "Updates a he_so",
        "description": "",
        "operationId": "updatehe_so",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "he_soId",
            "in": "path",
            "description": "ID of he_so to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "he_so object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/he_so"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "he_so"
        ],
        "summary": "Deletes a he_so",
        "description": "",
        "operationId": "deletehe_so",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "he_soId",
            "in": "path",
            "description": "ID of he_so to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "he_so not found"
          }
        }
      }
    },
    "/api/v1/he_so/bulk": {
      "post": {
        "tags": [
          "he_so"
        ],
        "summary": "Bulk he_so insert",
        "description": "",
        "operationId": "bulkhe_soInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "he_so objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/he_so"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "he_so"
        ],
        "summary": "Updates a he_so",
        "description": "",
        "operationId": "updatehe_so",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "he_so objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/he_so"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "he_so"
        ],
        "summary": "Deletes a he_so",
        "description": "",
        "operationId": "deletehe_so",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "he_so objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/he_so"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "he_so not found"
          }
        }
      }
    },
    "/api/v1/he_so/findOne": {
      "get": {
        "tags": [
          "he_so"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnehe_so",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/he_so"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/he_so/{he_soId}/exists": {
      "get": {
        "tags": [
          "he_so"
        ],
        "summary": "Check he_so with provided ID exists",
        "description": "Returns a single he_so",
        "operationId": "checkhe_soExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "he_soId",
            "in": "path",
            "description": "ID of he_so",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/he_so/count": {
      "get": {
        "tags": [
          "he_so"
        ],
        "summary": "Get he_so count",
        "operationId": "gethe_soCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/he_so/groupby/{columnName}": {
      "get": {
        "tags": [
          "he_so"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "he_soGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/he_so"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/he_so/distribution/{columnName}": {
      "get": {
        "tags": [
          "he_so"
        ],
        "summary": "",
        "description": "",
        "operationId": "he_soDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/he_so/distinct/{columnName}": {
      "get": {
        "tags": [
          "he_so"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "he_soDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/he_so/aggregate/{columnName}": {
      "get": {
        "tags": [
          "he_so"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "he_soAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/he_so"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/ho_so_ca_nhan": {
      "post": {
        "tags": [
          "ho_so_ca_nhan"
        ],
        "summary": "Add a new ho_so_ca_nhan",
        "description": "",
        "operationId": "addho_so_ca_nhan",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "ho_so_ca_nhan object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ho_so_ca_nhan"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "ho_so_ca_nhan"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getho_so_ca_nhan",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/ho_so_ca_nhan/{ho_so_ca_nhanId}": {
      "get": {
        "tags": [
          "ho_so_ca_nhan"
        ],
        "summary": "Find ho_so_ca_nhan by ID",
        "description": "Returns a single ho_so_ca_nhan",
        "operationId": "getho_so_ca_nhanById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ho_so_ca_nhanId",
            "in": "path",
            "description": "ID of ho_so_ca_nhan to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ho_so_ca_nhan"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "ho_so_ca_nhan not found"
          }
        }
      },
      "put": {
        "tags": [
          "ho_so_ca_nhan"
        ],
        "summary": "Updates a ho_so_ca_nhan",
        "description": "",
        "operationId": "updateho_so_ca_nhan",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ho_so_ca_nhanId",
            "in": "path",
            "description": "ID of ho_so_ca_nhan to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "ho_so_ca_nhan object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ho_so_ca_nhan"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "ho_so_ca_nhan"
        ],
        "summary": "Deletes a ho_so_ca_nhan",
        "description": "",
        "operationId": "deleteho_so_ca_nhan",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ho_so_ca_nhanId",
            "in": "path",
            "description": "ID of ho_so_ca_nhan to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "ho_so_ca_nhan not found"
          }
        }
      }
    },
    "/api/v1/ho_so_ca_nhan/bulk": {
      "post": {
        "tags": [
          "ho_so_ca_nhan"
        ],
        "summary": "Bulk ho_so_ca_nhan insert",
        "description": "",
        "operationId": "bulkho_so_ca_nhanInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "ho_so_ca_nhan objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ho_so_ca_nhan"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "ho_so_ca_nhan"
        ],
        "summary": "Updates a ho_so_ca_nhan",
        "description": "",
        "operationId": "updateho_so_ca_nhan",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "ho_so_ca_nhan objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ho_so_ca_nhan"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "ho_so_ca_nhan"
        ],
        "summary": "Deletes a ho_so_ca_nhan",
        "description": "",
        "operationId": "deleteho_so_ca_nhan",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "ho_so_ca_nhan objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ho_so_ca_nhan"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "ho_so_ca_nhan not found"
          }
        }
      }
    },
    "/api/v1/ho_so_ca_nhan/findOne": {
      "get": {
        "tags": [
          "ho_so_ca_nhan"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOneho_so_ca_nhan",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ho_so_ca_nhan"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/ho_so_ca_nhan/{ho_so_ca_nhanId}/exists": {
      "get": {
        "tags": [
          "ho_so_ca_nhan"
        ],
        "summary": "Check ho_so_ca_nhan with provided ID exists",
        "description": "Returns a single ho_so_ca_nhan",
        "operationId": "checkho_so_ca_nhanExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ho_so_ca_nhanId",
            "in": "path",
            "description": "ID of ho_so_ca_nhan",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/ho_so_ca_nhan/count": {
      "get": {
        "tags": [
          "ho_so_ca_nhan"
        ],
        "summary": "Get ho_so_ca_nhan count",
        "operationId": "getho_so_ca_nhanCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/ho_so_ca_nhan/groupby/{columnName}": {
      "get": {
        "tags": [
          "ho_so_ca_nhan"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "ho_so_ca_nhanGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ho_so_ca_nhan"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/ho_so_ca_nhan/distribution/{columnName}": {
      "get": {
        "tags": [
          "ho_so_ca_nhan"
        ],
        "summary": "",
        "description": "",
        "operationId": "ho_so_ca_nhanDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/ho_so_ca_nhan/distinct/{columnName}": {
      "get": {
        "tags": [
          "ho_so_ca_nhan"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "ho_so_ca_nhanDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/ho_so_ca_nhan/aggregate/{columnName}": {
      "get": {
        "tags": [
          "ho_so_ca_nhan"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "ho_so_ca_nhanAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ho_so_ca_nhan"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/hop_dong": {
      "post": {
        "tags": [
          "hop_dong"
        ],
        "summary": "Add a new hop_dong",
        "description": "",
        "operationId": "addhop_dong",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "hop_dong object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/hop_dong"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "hop_dong"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "gethop_dong",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/hop_dong/{hop_dongId}": {
      "get": {
        "tags": [
          "hop_dong"
        ],
        "summary": "Find hop_dong by ID",
        "description": "Returns a single hop_dong",
        "operationId": "gethop_dongById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "hop_dongId",
            "in": "path",
            "description": "ID of hop_dong to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/hop_dong"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "hop_dong not found"
          }
        }
      },
      "put": {
        "tags": [
          "hop_dong"
        ],
        "summary": "Updates a hop_dong",
        "description": "",
        "operationId": "updatehop_dong",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "hop_dongId",
            "in": "path",
            "description": "ID of hop_dong to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "hop_dong object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/hop_dong"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "hop_dong"
        ],
        "summary": "Deletes a hop_dong",
        "description": "",
        "operationId": "deletehop_dong",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "hop_dongId",
            "in": "path",
            "description": "ID of hop_dong to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "hop_dong not found"
          }
        }
      }
    },
    "/api/v1/hop_dong/bulk": {
      "post": {
        "tags": [
          "hop_dong"
        ],
        "summary": "Bulk hop_dong insert",
        "description": "",
        "operationId": "bulkhop_dongInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "hop_dong objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/hop_dong"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "hop_dong"
        ],
        "summary": "Updates a hop_dong",
        "description": "",
        "operationId": "updatehop_dong",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "hop_dong objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/hop_dong"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "hop_dong"
        ],
        "summary": "Deletes a hop_dong",
        "description": "",
        "operationId": "deletehop_dong",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "hop_dong objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/hop_dong"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "hop_dong not found"
          }
        }
      }
    },
    "/api/v1/hop_dong/findOne": {
      "get": {
        "tags": [
          "hop_dong"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnehop_dong",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/hop_dong"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/hop_dong/{hop_dongId}/exists": {
      "get": {
        "tags": [
          "hop_dong"
        ],
        "summary": "Check hop_dong with provided ID exists",
        "description": "Returns a single hop_dong",
        "operationId": "checkhop_dongExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "hop_dongId",
            "in": "path",
            "description": "ID of hop_dong",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/hop_dong/count": {
      "get": {
        "tags": [
          "hop_dong"
        ],
        "summary": "Get hop_dong count",
        "operationId": "gethop_dongCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/hop_dong/groupby/{columnName}": {
      "get": {
        "tags": [
          "hop_dong"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "hop_dongGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/hop_dong"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/hop_dong/distribution/{columnName}": {
      "get": {
        "tags": [
          "hop_dong"
        ],
        "summary": "",
        "description": "",
        "operationId": "hop_dongDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/hop_dong/distinct/{columnName}": {
      "get": {
        "tags": [
          "hop_dong"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "hop_dongDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/hop_dong/aggregate/{columnName}": {
      "get": {
        "tags": [
          "hop_dong"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "hop_dongAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/hop_dong"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/loai_don_tu": {
      "post": {
        "tags": [
          "loai_don_tu"
        ],
        "summary": "Add a new loai_don_tu",
        "description": "",
        "operationId": "addloai_don_tu",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "loai_don_tu object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/loai_don_tu"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "loai_don_tu"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getloai_don_tu",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/loai_don_tu/{loai_don_tuId}": {
      "get": {
        "tags": [
          "loai_don_tu"
        ],
        "summary": "Find loai_don_tu by ID",
        "description": "Returns a single loai_don_tu",
        "operationId": "getloai_don_tuById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "loai_don_tuId",
            "in": "path",
            "description": "ID of loai_don_tu to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/loai_don_tu"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "loai_don_tu not found"
          }
        }
      },
      "put": {
        "tags": [
          "loai_don_tu"
        ],
        "summary": "Updates a loai_don_tu",
        "description": "",
        "operationId": "updateloai_don_tu",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "loai_don_tuId",
            "in": "path",
            "description": "ID of loai_don_tu to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "loai_don_tu object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/loai_don_tu"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "loai_don_tu"
        ],
        "summary": "Deletes a loai_don_tu",
        "description": "",
        "operationId": "deleteloai_don_tu",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "loai_don_tuId",
            "in": "path",
            "description": "ID of loai_don_tu to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "loai_don_tu not found"
          }
        }
      }
    },
    "/api/v1/loai_don_tu/bulk": {
      "post": {
        "tags": [
          "loai_don_tu"
        ],
        "summary": "Bulk loai_don_tu insert",
        "description": "",
        "operationId": "bulkloai_don_tuInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "loai_don_tu objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/loai_don_tu"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "loai_don_tu"
        ],
        "summary": "Updates a loai_don_tu",
        "description": "",
        "operationId": "updateloai_don_tu",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "loai_don_tu objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/loai_don_tu"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "loai_don_tu"
        ],
        "summary": "Deletes a loai_don_tu",
        "description": "",
        "operationId": "deleteloai_don_tu",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "loai_don_tu objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/loai_don_tu"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "loai_don_tu not found"
          }
        }
      }
    },
    "/api/v1/loai_don_tu/findOne": {
      "get": {
        "tags": [
          "loai_don_tu"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOneloai_don_tu",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/loai_don_tu"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/loai_don_tu/{loai_don_tuId}/exists": {
      "get": {
        "tags": [
          "loai_don_tu"
        ],
        "summary": "Check loai_don_tu with provided ID exists",
        "description": "Returns a single loai_don_tu",
        "operationId": "checkloai_don_tuExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "loai_don_tuId",
            "in": "path",
            "description": "ID of loai_don_tu",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/loai_don_tu/count": {
      "get": {
        "tags": [
          "loai_don_tu"
        ],
        "summary": "Get loai_don_tu count",
        "operationId": "getloai_don_tuCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/loai_don_tu/groupby/{columnName}": {
      "get": {
        "tags": [
          "loai_don_tu"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "loai_don_tuGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/loai_don_tu"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/loai_don_tu/distribution/{columnName}": {
      "get": {
        "tags": [
          "loai_don_tu"
        ],
        "summary": "",
        "description": "",
        "operationId": "loai_don_tuDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/loai_don_tu/distinct/{columnName}": {
      "get": {
        "tags": [
          "loai_don_tu"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "loai_don_tuDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/loai_don_tu/aggregate/{columnName}": {
      "get": {
        "tags": [
          "loai_don_tu"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "loai_don_tuAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/loai_don_tu"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/loai_he_so": {
      "post": {
        "tags": [
          "loai_he_so"
        ],
        "summary": "Add a new loai_he_so",
        "description": "",
        "operationId": "addloai_he_so",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "loai_he_so object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/loai_he_so"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "loai_he_so"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getloai_he_so",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/loai_he_so/{loai_he_soId}": {
      "get": {
        "tags": [
          "loai_he_so"
        ],
        "summary": "Find loai_he_so by ID",
        "description": "Returns a single loai_he_so",
        "operationId": "getloai_he_soById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "loai_he_soId",
            "in": "path",
            "description": "ID of loai_he_so to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/loai_he_so"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "loai_he_so not found"
          }
        }
      },
      "put": {
        "tags": [
          "loai_he_so"
        ],
        "summary": "Updates a loai_he_so",
        "description": "",
        "operationId": "updateloai_he_so",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "loai_he_soId",
            "in": "path",
            "description": "ID of loai_he_so to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "loai_he_so object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/loai_he_so"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "loai_he_so"
        ],
        "summary": "Deletes a loai_he_so",
        "description": "",
        "operationId": "deleteloai_he_so",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "loai_he_soId",
            "in": "path",
            "description": "ID of loai_he_so to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "loai_he_so not found"
          }
        }
      }
    },
    "/api/v1/loai_he_so/bulk": {
      "post": {
        "tags": [
          "loai_he_so"
        ],
        "summary": "Bulk loai_he_so insert",
        "description": "",
        "operationId": "bulkloai_he_soInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "loai_he_so objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/loai_he_so"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "loai_he_so"
        ],
        "summary": "Updates a loai_he_so",
        "description": "",
        "operationId": "updateloai_he_so",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "loai_he_so objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/loai_he_so"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "loai_he_so"
        ],
        "summary": "Deletes a loai_he_so",
        "description": "",
        "operationId": "deleteloai_he_so",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "loai_he_so objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/loai_he_so"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "loai_he_so not found"
          }
        }
      }
    },
    "/api/v1/loai_he_so/findOne": {
      "get": {
        "tags": [
          "loai_he_so"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOneloai_he_so",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/loai_he_so"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/loai_he_so/{loai_he_soId}/exists": {
      "get": {
        "tags": [
          "loai_he_so"
        ],
        "summary": "Check loai_he_so with provided ID exists",
        "description": "Returns a single loai_he_so",
        "operationId": "checkloai_he_soExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "loai_he_soId",
            "in": "path",
            "description": "ID of loai_he_so",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/loai_he_so/count": {
      "get": {
        "tags": [
          "loai_he_so"
        ],
        "summary": "Get loai_he_so count",
        "operationId": "getloai_he_soCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/loai_he_so/groupby/{columnName}": {
      "get": {
        "tags": [
          "loai_he_so"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "loai_he_soGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/loai_he_so"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/loai_he_so/distribution/{columnName}": {
      "get": {
        "tags": [
          "loai_he_so"
        ],
        "summary": "",
        "description": "",
        "operationId": "loai_he_soDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/loai_he_so/distinct/{columnName}": {
      "get": {
        "tags": [
          "loai_he_so"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "loai_he_soDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/loai_he_so/aggregate/{columnName}": {
      "get": {
        "tags": [
          "loai_he_so"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "loai_he_soAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/loai_he_so"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/loai_hop_dong": {
      "post": {
        "tags": [
          "loai_hop_dong"
        ],
        "summary": "Add a new loai_hop_dong",
        "description": "",
        "operationId": "addloai_hop_dong",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "loai_hop_dong object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/loai_hop_dong"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "loai_hop_dong"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getloai_hop_dong",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/loai_hop_dong/{loai_hop_dongId}": {
      "get": {
        "tags": [
          "loai_hop_dong"
        ],
        "summary": "Find loai_hop_dong by ID",
        "description": "Returns a single loai_hop_dong",
        "operationId": "getloai_hop_dongById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "loai_hop_dongId",
            "in": "path",
            "description": "ID of loai_hop_dong to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/loai_hop_dong"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "loai_hop_dong not found"
          }
        }
      },
      "put": {
        "tags": [
          "loai_hop_dong"
        ],
        "summary": "Updates a loai_hop_dong",
        "description": "",
        "operationId": "updateloai_hop_dong",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "loai_hop_dongId",
            "in": "path",
            "description": "ID of loai_hop_dong to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "loai_hop_dong object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/loai_hop_dong"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "loai_hop_dong"
        ],
        "summary": "Deletes a loai_hop_dong",
        "description": "",
        "operationId": "deleteloai_hop_dong",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "loai_hop_dongId",
            "in": "path",
            "description": "ID of loai_hop_dong to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "loai_hop_dong not found"
          }
        }
      }
    },
    "/api/v1/loai_hop_dong/bulk": {
      "post": {
        "tags": [
          "loai_hop_dong"
        ],
        "summary": "Bulk loai_hop_dong insert",
        "description": "",
        "operationId": "bulkloai_hop_dongInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "loai_hop_dong objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/loai_hop_dong"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "loai_hop_dong"
        ],
        "summary": "Updates a loai_hop_dong",
        "description": "",
        "operationId": "updateloai_hop_dong",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "loai_hop_dong objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/loai_hop_dong"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "loai_hop_dong"
        ],
        "summary": "Deletes a loai_hop_dong",
        "description": "",
        "operationId": "deleteloai_hop_dong",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "loai_hop_dong objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/loai_hop_dong"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "loai_hop_dong not found"
          }
        }
      }
    },
    "/api/v1/loai_hop_dong/findOne": {
      "get": {
        "tags": [
          "loai_hop_dong"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOneloai_hop_dong",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/loai_hop_dong"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/loai_hop_dong/{loai_hop_dongId}/exists": {
      "get": {
        "tags": [
          "loai_hop_dong"
        ],
        "summary": "Check loai_hop_dong with provided ID exists",
        "description": "Returns a single loai_hop_dong",
        "operationId": "checkloai_hop_dongExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "loai_hop_dongId",
            "in": "path",
            "description": "ID of loai_hop_dong",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/loai_hop_dong/count": {
      "get": {
        "tags": [
          "loai_hop_dong"
        ],
        "summary": "Get loai_hop_dong count",
        "operationId": "getloai_hop_dongCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/loai_hop_dong/groupby/{columnName}": {
      "get": {
        "tags": [
          "loai_hop_dong"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "loai_hop_dongGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/loai_hop_dong"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/loai_hop_dong/distribution/{columnName}": {
      "get": {
        "tags": [
          "loai_hop_dong"
        ],
        "summary": "",
        "description": "",
        "operationId": "loai_hop_dongDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/loai_hop_dong/distinct/{columnName}": {
      "get": {
        "tags": [
          "loai_hop_dong"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "loai_hop_dongDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/loai_hop_dong/aggregate/{columnName}": {
      "get": {
        "tags": [
          "loai_hop_dong"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "loai_hop_dongAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/loai_hop_dong"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/loai_phu_cap": {
      "post": {
        "tags": [
          "loai_phu_cap"
        ],
        "summary": "Add a new loai_phu_cap",
        "description": "",
        "operationId": "addloai_phu_cap",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "loai_phu_cap object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/loai_phu_cap"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "loai_phu_cap"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getloai_phu_cap",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/loai_phu_cap/{loai_phu_capId}": {
      "get": {
        "tags": [
          "loai_phu_cap"
        ],
        "summary": "Find loai_phu_cap by ID",
        "description": "Returns a single loai_phu_cap",
        "operationId": "getloai_phu_capById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "loai_phu_capId",
            "in": "path",
            "description": "ID of loai_phu_cap to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/loai_phu_cap"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "loai_phu_cap not found"
          }
        }
      },
      "put": {
        "tags": [
          "loai_phu_cap"
        ],
        "summary": "Updates a loai_phu_cap",
        "description": "",
        "operationId": "updateloai_phu_cap",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "loai_phu_capId",
            "in": "path",
            "description": "ID of loai_phu_cap to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "loai_phu_cap object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/loai_phu_cap"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "loai_phu_cap"
        ],
        "summary": "Deletes a loai_phu_cap",
        "description": "",
        "operationId": "deleteloai_phu_cap",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "loai_phu_capId",
            "in": "path",
            "description": "ID of loai_phu_cap to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "loai_phu_cap not found"
          }
        }
      }
    },
    "/api/v1/loai_phu_cap/bulk": {
      "post": {
        "tags": [
          "loai_phu_cap"
        ],
        "summary": "Bulk loai_phu_cap insert",
        "description": "",
        "operationId": "bulkloai_phu_capInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "loai_phu_cap objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/loai_phu_cap"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "loai_phu_cap"
        ],
        "summary": "Updates a loai_phu_cap",
        "description": "",
        "operationId": "updateloai_phu_cap",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "loai_phu_cap objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/loai_phu_cap"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "loai_phu_cap"
        ],
        "summary": "Deletes a loai_phu_cap",
        "description": "",
        "operationId": "deleteloai_phu_cap",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "loai_phu_cap objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/loai_phu_cap"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "loai_phu_cap not found"
          }
        }
      }
    },
    "/api/v1/loai_phu_cap/findOne": {
      "get": {
        "tags": [
          "loai_phu_cap"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOneloai_phu_cap",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/loai_phu_cap"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/loai_phu_cap/{loai_phu_capId}/exists": {
      "get": {
        "tags": [
          "loai_phu_cap"
        ],
        "summary": "Check loai_phu_cap with provided ID exists",
        "description": "Returns a single loai_phu_cap",
        "operationId": "checkloai_phu_capExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "loai_phu_capId",
            "in": "path",
            "description": "ID of loai_phu_cap",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/loai_phu_cap/count": {
      "get": {
        "tags": [
          "loai_phu_cap"
        ],
        "summary": "Get loai_phu_cap count",
        "operationId": "getloai_phu_capCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/loai_phu_cap/groupby/{columnName}": {
      "get": {
        "tags": [
          "loai_phu_cap"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "loai_phu_capGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/loai_phu_cap"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/loai_phu_cap/distribution/{columnName}": {
      "get": {
        "tags": [
          "loai_phu_cap"
        ],
        "summary": "",
        "description": "",
        "operationId": "loai_phu_capDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/loai_phu_cap/distinct/{columnName}": {
      "get": {
        "tags": [
          "loai_phu_cap"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "loai_phu_capDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/loai_phu_cap/aggregate/{columnName}": {
      "get": {
        "tags": [
          "loai_phu_cap"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "loai_phu_capAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/loai_phu_cap"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/loai_quyet_dinh": {
      "post": {
        "tags": [
          "loai_quyet_dinh"
        ],
        "summary": "Add a new loai_quyet_dinh",
        "description": "",
        "operationId": "addloai_quyet_dinh",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "loai_quyet_dinh object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/loai_quyet_dinh"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "loai_quyet_dinh"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getloai_quyet_dinh",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/loai_quyet_dinh/{loai_quyet_dinhId}": {
      "get": {
        "tags": [
          "loai_quyet_dinh"
        ],
        "summary": "Find loai_quyet_dinh by ID",
        "description": "Returns a single loai_quyet_dinh",
        "operationId": "getloai_quyet_dinhById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "loai_quyet_dinhId",
            "in": "path",
            "description": "ID of loai_quyet_dinh to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/loai_quyet_dinh"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "loai_quyet_dinh not found"
          }
        }
      },
      "put": {
        "tags": [
          "loai_quyet_dinh"
        ],
        "summary": "Updates a loai_quyet_dinh",
        "description": "",
        "operationId": "updateloai_quyet_dinh",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "loai_quyet_dinhId",
            "in": "path",
            "description": "ID of loai_quyet_dinh to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "loai_quyet_dinh object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/loai_quyet_dinh"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "loai_quyet_dinh"
        ],
        "summary": "Deletes a loai_quyet_dinh",
        "description": "",
        "operationId": "deleteloai_quyet_dinh",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "loai_quyet_dinhId",
            "in": "path",
            "description": "ID of loai_quyet_dinh to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "loai_quyet_dinh not found"
          }
        }
      }
    },
    "/api/v1/loai_quyet_dinh/bulk": {
      "post": {
        "tags": [
          "loai_quyet_dinh"
        ],
        "summary": "Bulk loai_quyet_dinh insert",
        "description": "",
        "operationId": "bulkloai_quyet_dinhInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "loai_quyet_dinh objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/loai_quyet_dinh"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "loai_quyet_dinh"
        ],
        "summary": "Updates a loai_quyet_dinh",
        "description": "",
        "operationId": "updateloai_quyet_dinh",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "loai_quyet_dinh objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/loai_quyet_dinh"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "loai_quyet_dinh"
        ],
        "summary": "Deletes a loai_quyet_dinh",
        "description": "",
        "operationId": "deleteloai_quyet_dinh",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "loai_quyet_dinh objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/loai_quyet_dinh"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "loai_quyet_dinh not found"
          }
        }
      }
    },
    "/api/v1/loai_quyet_dinh/findOne": {
      "get": {
        "tags": [
          "loai_quyet_dinh"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOneloai_quyet_dinh",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/loai_quyet_dinh"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/loai_quyet_dinh/{loai_quyet_dinhId}/exists": {
      "get": {
        "tags": [
          "loai_quyet_dinh"
        ],
        "summary": "Check loai_quyet_dinh with provided ID exists",
        "description": "Returns a single loai_quyet_dinh",
        "operationId": "checkloai_quyet_dinhExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "loai_quyet_dinhId",
            "in": "path",
            "description": "ID of loai_quyet_dinh",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/loai_quyet_dinh/count": {
      "get": {
        "tags": [
          "loai_quyet_dinh"
        ],
        "summary": "Get loai_quyet_dinh count",
        "operationId": "getloai_quyet_dinhCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/loai_quyet_dinh/groupby/{columnName}": {
      "get": {
        "tags": [
          "loai_quyet_dinh"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "loai_quyet_dinhGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/loai_quyet_dinh"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/loai_quyet_dinh/distribution/{columnName}": {
      "get": {
        "tags": [
          "loai_quyet_dinh"
        ],
        "summary": "",
        "description": "",
        "operationId": "loai_quyet_dinhDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/loai_quyet_dinh/distinct/{columnName}": {
      "get": {
        "tags": [
          "loai_quyet_dinh"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "loai_quyet_dinhDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/loai_quyet_dinh/aggregate/{columnName}": {
      "get": {
        "tags": [
          "loai_quyet_dinh"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "loai_quyet_dinhAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/loai_quyet_dinh"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/nghi_phep": {
      "post": {
        "tags": [
          "nghi_phep"
        ],
        "summary": "Add a new nghi_phep",
        "description": "",
        "operationId": "addnghi_phep",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "nghi_phep object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/nghi_phep"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "nghi_phep"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getnghi_phep",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/nghi_phep/{nghi_phepId}": {
      "get": {
        "tags": [
          "nghi_phep"
        ],
        "summary": "Find nghi_phep by ID",
        "description": "Returns a single nghi_phep",
        "operationId": "getnghi_phepById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "nghi_phepId",
            "in": "path",
            "description": "ID of nghi_phep to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/nghi_phep"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "nghi_phep not found"
          }
        }
      },
      "put": {
        "tags": [
          "nghi_phep"
        ],
        "summary": "Updates a nghi_phep",
        "description": "",
        "operationId": "updatenghi_phep",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "nghi_phepId",
            "in": "path",
            "description": "ID of nghi_phep to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "nghi_phep object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/nghi_phep"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "nghi_phep"
        ],
        "summary": "Deletes a nghi_phep",
        "description": "",
        "operationId": "deletenghi_phep",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "nghi_phepId",
            "in": "path",
            "description": "ID of nghi_phep to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "nghi_phep not found"
          }
        }
      }
    },
    "/api/v1/nghi_phep/bulk": {
      "post": {
        "tags": [
          "nghi_phep"
        ],
        "summary": "Bulk nghi_phep insert",
        "description": "",
        "operationId": "bulknghi_phepInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "nghi_phep objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/nghi_phep"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "nghi_phep"
        ],
        "summary": "Updates a nghi_phep",
        "description": "",
        "operationId": "updatenghi_phep",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "nghi_phep objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/nghi_phep"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "nghi_phep"
        ],
        "summary": "Deletes a nghi_phep",
        "description": "",
        "operationId": "deletenghi_phep",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "nghi_phep objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/nghi_phep"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "nghi_phep not found"
          }
        }
      }
    },
    "/api/v1/nghi_phep/findOne": {
      "get": {
        "tags": [
          "nghi_phep"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnenghi_phep",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/nghi_phep"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/nghi_phep/{nghi_phepId}/exists": {
      "get": {
        "tags": [
          "nghi_phep"
        ],
        "summary": "Check nghi_phep with provided ID exists",
        "description": "Returns a single nghi_phep",
        "operationId": "checknghi_phepExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "nghi_phepId",
            "in": "path",
            "description": "ID of nghi_phep",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/nghi_phep/count": {
      "get": {
        "tags": [
          "nghi_phep"
        ],
        "summary": "Get nghi_phep count",
        "operationId": "getnghi_phepCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/nghi_phep/groupby/{columnName}": {
      "get": {
        "tags": [
          "nghi_phep"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "nghi_phepGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/nghi_phep"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/nghi_phep/distribution/{columnName}": {
      "get": {
        "tags": [
          "nghi_phep"
        ],
        "summary": "",
        "description": "",
        "operationId": "nghi_phepDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/nghi_phep/distinct/{columnName}": {
      "get": {
        "tags": [
          "nghi_phep"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "nghi_phepDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/nghi_phep/aggregate/{columnName}": {
      "get": {
        "tags": [
          "nghi_phep"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "nghi_phepAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/nghi_phep"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/nguoi_dung": {
      "post": {
        "tags": [
          "nguoi_dung"
        ],
        "summary": "Add a new nguoi_dung",
        "description": "",
        "operationId": "addnguoi_dung",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "nguoi_dung object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/nguoi_dung"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "nguoi_dung"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getnguoi_dung",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/nguoi_dung/{nguoi_dungId}": {
      "get": {
        "tags": [
          "nguoi_dung"
        ],
        "summary": "Find nguoi_dung by ID",
        "description": "Returns a single nguoi_dung",
        "operationId": "getnguoi_dungById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "nguoi_dungId",
            "in": "path",
            "description": "ID of nguoi_dung to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/nguoi_dung"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "nguoi_dung not found"
          }
        }
      },
      "put": {
        "tags": [
          "nguoi_dung"
        ],
        "summary": "Updates a nguoi_dung",
        "description": "",
        "operationId": "updatenguoi_dung",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "nguoi_dungId",
            "in": "path",
            "description": "ID of nguoi_dung to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "nguoi_dung object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/nguoi_dung"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "nguoi_dung"
        ],
        "summary": "Deletes a nguoi_dung",
        "description": "",
        "operationId": "deletenguoi_dung",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "nguoi_dungId",
            "in": "path",
            "description": "ID of nguoi_dung to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "nguoi_dung not found"
          }
        }
      }
    },
    "/api/v1/nguoi_dung/bulk": {
      "post": {
        "tags": [
          "nguoi_dung"
        ],
        "summary": "Bulk nguoi_dung insert",
        "description": "",
        "operationId": "bulknguoi_dungInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "nguoi_dung objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/nguoi_dung"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "nguoi_dung"
        ],
        "summary": "Updates a nguoi_dung",
        "description": "",
        "operationId": "updatenguoi_dung",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "nguoi_dung objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/nguoi_dung"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "nguoi_dung"
        ],
        "summary": "Deletes a nguoi_dung",
        "description": "",
        "operationId": "deletenguoi_dung",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "nguoi_dung objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/nguoi_dung"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "nguoi_dung not found"
          }
        }
      }
    },
    "/api/v1/nguoi_dung/findOne": {
      "get": {
        "tags": [
          "nguoi_dung"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnenguoi_dung",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/nguoi_dung"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/nguoi_dung/{nguoi_dungId}/exists": {
      "get": {
        "tags": [
          "nguoi_dung"
        ],
        "summary": "Check nguoi_dung with provided ID exists",
        "description": "Returns a single nguoi_dung",
        "operationId": "checknguoi_dungExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "nguoi_dungId",
            "in": "path",
            "description": "ID of nguoi_dung",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/nguoi_dung/count": {
      "get": {
        "tags": [
          "nguoi_dung"
        ],
        "summary": "Get nguoi_dung count",
        "operationId": "getnguoi_dungCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/nguoi_dung/groupby/{columnName}": {
      "get": {
        "tags": [
          "nguoi_dung"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "nguoi_dungGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/nguoi_dung"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/nguoi_dung/distribution/{columnName}": {
      "get": {
        "tags": [
          "nguoi_dung"
        ],
        "summary": "",
        "description": "",
        "operationId": "nguoi_dungDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/nguoi_dung/distinct/{columnName}": {
      "get": {
        "tags": [
          "nguoi_dung"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "nguoi_dungDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/nguoi_dung/aggregate/{columnName}": {
      "get": {
        "tags": [
          "nguoi_dung"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "nguoi_dungAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/nguoi_dung"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/nhan_vien": {
      "post": {
        "tags": [
          "nhan_vien"
        ],
        "summary": "Add a new nhan_vien",
        "description": "",
        "operationId": "addnhan_vien",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "nhan_vien object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/nhan_vien"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "nhan_vien"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getnhan_vien",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/nhan_vien/{nhan_vienId}": {
      "get": {
        "tags": [
          "nhan_vien"
        ],
        "summary": "Find nhan_vien by ID",
        "description": "Returns a single nhan_vien",
        "operationId": "getnhan_vienById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "nhan_vienId",
            "in": "path",
            "description": "ID of nhan_vien to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/nhan_vien"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "nhan_vien not found"
          }
        }
      },
      "put": {
        "tags": [
          "nhan_vien"
        ],
        "summary": "Updates a nhan_vien",
        "description": "",
        "operationId": "updatenhan_vien",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "nhan_vienId",
            "in": "path",
            "description": "ID of nhan_vien to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "nhan_vien object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/nhan_vien"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "nhan_vien"
        ],
        "summary": "Deletes a nhan_vien",
        "description": "",
        "operationId": "deletenhan_vien",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "nhan_vienId",
            "in": "path",
            "description": "ID of nhan_vien to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "nhan_vien not found"
          }
        }
      }
    },
    "/api/v1/nhan_vien/bulk": {
      "post": {
        "tags": [
          "nhan_vien"
        ],
        "summary": "Bulk nhan_vien insert",
        "description": "",
        "operationId": "bulknhan_vienInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "nhan_vien objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/nhan_vien"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "nhan_vien"
        ],
        "summary": "Updates a nhan_vien",
        "description": "",
        "operationId": "updatenhan_vien",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "nhan_vien objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/nhan_vien"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "nhan_vien"
        ],
        "summary": "Deletes a nhan_vien",
        "description": "",
        "operationId": "deletenhan_vien",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "nhan_vien objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/nhan_vien"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "nhan_vien not found"
          }
        }
      }
    },
    "/api/v1/nhan_vien/findOne": {
      "get": {
        "tags": [
          "nhan_vien"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnenhan_vien",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/nhan_vien"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/nhan_vien/{nhan_vienId}/exists": {
      "get": {
        "tags": [
          "nhan_vien"
        ],
        "summary": "Check nhan_vien with provided ID exists",
        "description": "Returns a single nhan_vien",
        "operationId": "checknhan_vienExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "nhan_vienId",
            "in": "path",
            "description": "ID of nhan_vien",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/nhan_vien/count": {
      "get": {
        "tags": [
          "nhan_vien"
        ],
        "summary": "Get nhan_vien count",
        "operationId": "getnhan_vienCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/nhan_vien/groupby/{columnName}": {
      "get": {
        "tags": [
          "nhan_vien"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "nhan_vienGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/nhan_vien"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/nhan_vien/distribution/{columnName}": {
      "get": {
        "tags": [
          "nhan_vien"
        ],
        "summary": "",
        "description": "",
        "operationId": "nhan_vienDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/nhan_vien/distinct/{columnName}": {
      "get": {
        "tags": [
          "nhan_vien"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "nhan_vienDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/nhan_vien/aggregate/{columnName}": {
      "get": {
        "tags": [
          "nhan_vien"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "nhan_vienAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/nhan_vien"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/nhom_nguoi_dung": {
      "post": {
        "tags": [
          "nhom_nguoi_dung"
        ],
        "summary": "Add a new nhom_nguoi_dung",
        "description": "",
        "operationId": "addnhom_nguoi_dung",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "nhom_nguoi_dung object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/nhom_nguoi_dung"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "nhom_nguoi_dung"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getnhom_nguoi_dung",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/nhom_nguoi_dung/{nhom_nguoi_dungId}": {
      "get": {
        "tags": [
          "nhom_nguoi_dung"
        ],
        "summary": "Find nhom_nguoi_dung by ID",
        "description": "Returns a single nhom_nguoi_dung",
        "operationId": "getnhom_nguoi_dungById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "nhom_nguoi_dungId",
            "in": "path",
            "description": "ID of nhom_nguoi_dung to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/nhom_nguoi_dung"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "nhom_nguoi_dung not found"
          }
        }
      },
      "put": {
        "tags": [
          "nhom_nguoi_dung"
        ],
        "summary": "Updates a nhom_nguoi_dung",
        "description": "",
        "operationId": "updatenhom_nguoi_dung",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "nhom_nguoi_dungId",
            "in": "path",
            "description": "ID of nhom_nguoi_dung to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "nhom_nguoi_dung object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/nhom_nguoi_dung"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "nhom_nguoi_dung"
        ],
        "summary": "Deletes a nhom_nguoi_dung",
        "description": "",
        "operationId": "deletenhom_nguoi_dung",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "nhom_nguoi_dungId",
            "in": "path",
            "description": "ID of nhom_nguoi_dung to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "nhom_nguoi_dung not found"
          }
        }
      }
    },
    "/api/v1/nhom_nguoi_dung/bulk": {
      "post": {
        "tags": [
          "nhom_nguoi_dung"
        ],
        "summary": "Bulk nhom_nguoi_dung insert",
        "description": "",
        "operationId": "bulknhom_nguoi_dungInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "nhom_nguoi_dung objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/nhom_nguoi_dung"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "nhom_nguoi_dung"
        ],
        "summary": "Updates a nhom_nguoi_dung",
        "description": "",
        "operationId": "updatenhom_nguoi_dung",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "nhom_nguoi_dung objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/nhom_nguoi_dung"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "nhom_nguoi_dung"
        ],
        "summary": "Deletes a nhom_nguoi_dung",
        "description": "",
        "operationId": "deletenhom_nguoi_dung",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "nhom_nguoi_dung objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/nhom_nguoi_dung"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "nhom_nguoi_dung not found"
          }
        }
      }
    },
    "/api/v1/nhom_nguoi_dung/findOne": {
      "get": {
        "tags": [
          "nhom_nguoi_dung"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnenhom_nguoi_dung",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/nhom_nguoi_dung"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/nhom_nguoi_dung/{nhom_nguoi_dungId}/exists": {
      "get": {
        "tags": [
          "nhom_nguoi_dung"
        ],
        "summary": "Check nhom_nguoi_dung with provided ID exists",
        "description": "Returns a single nhom_nguoi_dung",
        "operationId": "checknhom_nguoi_dungExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "nhom_nguoi_dungId",
            "in": "path",
            "description": "ID of nhom_nguoi_dung",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/nhom_nguoi_dung/count": {
      "get": {
        "tags": [
          "nhom_nguoi_dung"
        ],
        "summary": "Get nhom_nguoi_dung count",
        "operationId": "getnhom_nguoi_dungCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/nhom_nguoi_dung/groupby/{columnName}": {
      "get": {
        "tags": [
          "nhom_nguoi_dung"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "nhom_nguoi_dungGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/nhom_nguoi_dung"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/nhom_nguoi_dung/distribution/{columnName}": {
      "get": {
        "tags": [
          "nhom_nguoi_dung"
        ],
        "summary": "",
        "description": "",
        "operationId": "nhom_nguoi_dungDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/nhom_nguoi_dung/distinct/{columnName}": {
      "get": {
        "tags": [
          "nhom_nguoi_dung"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "nhom_nguoi_dungDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/nhom_nguoi_dung/aggregate/{columnName}": {
      "get": {
        "tags": [
          "nhom_nguoi_dung"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "nhom_nguoi_dungAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/nhom_nguoi_dung"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/phieu_danh_gia": {
      "post": {
        "tags": [
          "phieu_danh_gia"
        ],
        "summary": "Add a new phieu_danh_gia",
        "description": "",
        "operationId": "addphieu_danh_gia",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "phieu_danh_gia object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/phieu_danh_gia"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "phieu_danh_gia"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getphieu_danh_gia",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/phieu_danh_gia/{phieu_danh_giaId}": {
      "get": {
        "tags": [
          "phieu_danh_gia"
        ],
        "summary": "Find phieu_danh_gia by ID",
        "description": "Returns a single phieu_danh_gia",
        "operationId": "getphieu_danh_giaById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "phieu_danh_giaId",
            "in": "path",
            "description": "ID of phieu_danh_gia to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/phieu_danh_gia"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "phieu_danh_gia not found"
          }
        }
      },
      "put": {
        "tags": [
          "phieu_danh_gia"
        ],
        "summary": "Updates a phieu_danh_gia",
        "description": "",
        "operationId": "updatephieu_danh_gia",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "phieu_danh_giaId",
            "in": "path",
            "description": "ID of phieu_danh_gia to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "phieu_danh_gia object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/phieu_danh_gia"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "phieu_danh_gia"
        ],
        "summary": "Deletes a phieu_danh_gia",
        "description": "",
        "operationId": "deletephieu_danh_gia",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "phieu_danh_giaId",
            "in": "path",
            "description": "ID of phieu_danh_gia to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "phieu_danh_gia not found"
          }
        }
      }
    },
    "/api/v1/phieu_danh_gia/bulk": {
      "post": {
        "tags": [
          "phieu_danh_gia"
        ],
        "summary": "Bulk phieu_danh_gia insert",
        "description": "",
        "operationId": "bulkphieu_danh_giaInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "phieu_danh_gia objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/phieu_danh_gia"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "phieu_danh_gia"
        ],
        "summary": "Updates a phieu_danh_gia",
        "description": "",
        "operationId": "updatephieu_danh_gia",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "phieu_danh_gia objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/phieu_danh_gia"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "phieu_danh_gia"
        ],
        "summary": "Deletes a phieu_danh_gia",
        "description": "",
        "operationId": "deletephieu_danh_gia",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "phieu_danh_gia objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/phieu_danh_gia"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "phieu_danh_gia not found"
          }
        }
      }
    },
    "/api/v1/phieu_danh_gia/findOne": {
      "get": {
        "tags": [
          "phieu_danh_gia"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnephieu_danh_gia",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/phieu_danh_gia"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/phieu_danh_gia/{phieu_danh_giaId}/exists": {
      "get": {
        "tags": [
          "phieu_danh_gia"
        ],
        "summary": "Check phieu_danh_gia with provided ID exists",
        "description": "Returns a single phieu_danh_gia",
        "operationId": "checkphieu_danh_giaExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "phieu_danh_giaId",
            "in": "path",
            "description": "ID of phieu_danh_gia",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/phieu_danh_gia/count": {
      "get": {
        "tags": [
          "phieu_danh_gia"
        ],
        "summary": "Get phieu_danh_gia count",
        "operationId": "getphieu_danh_giaCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/phieu_danh_gia/groupby/{columnName}": {
      "get": {
        "tags": [
          "phieu_danh_gia"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "phieu_danh_giaGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/phieu_danh_gia"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/phieu_danh_gia/distribution/{columnName}": {
      "get": {
        "tags": [
          "phieu_danh_gia"
        ],
        "summary": "",
        "description": "",
        "operationId": "phieu_danh_giaDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/phieu_danh_gia/distinct/{columnName}": {
      "get": {
        "tags": [
          "phieu_danh_gia"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "phieu_danh_giaDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/phieu_danh_gia/aggregate/{columnName}": {
      "get": {
        "tags": [
          "phieu_danh_gia"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "phieu_danh_giaAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/phieu_danh_gia"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/phieu_luong": {
      "post": {
        "tags": [
          "phieu_luong"
        ],
        "summary": "Add a new phieu_luong",
        "description": "",
        "operationId": "addphieu_luong",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "phieu_luong object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/phieu_luong"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "phieu_luong"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getphieu_luong",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/phieu_luong/{phieu_luongId}": {
      "get": {
        "tags": [
          "phieu_luong"
        ],
        "summary": "Find phieu_luong by ID",
        "description": "Returns a single phieu_luong",
        "operationId": "getphieu_luongById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "phieu_luongId",
            "in": "path",
            "description": "ID of phieu_luong to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/phieu_luong"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "phieu_luong not found"
          }
        }
      },
      "put": {
        "tags": [
          "phieu_luong"
        ],
        "summary": "Updates a phieu_luong",
        "description": "",
        "operationId": "updatephieu_luong",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "phieu_luongId",
            "in": "path",
            "description": "ID of phieu_luong to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "phieu_luong object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/phieu_luong"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "phieu_luong"
        ],
        "summary": "Deletes a phieu_luong",
        "description": "",
        "operationId": "deletephieu_luong",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "phieu_luongId",
            "in": "path",
            "description": "ID of phieu_luong to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "phieu_luong not found"
          }
        }
      }
    },
    "/api/v1/phieu_luong/bulk": {
      "post": {
        "tags": [
          "phieu_luong"
        ],
        "summary": "Bulk phieu_luong insert",
        "description": "",
        "operationId": "bulkphieu_luongInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "phieu_luong objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/phieu_luong"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "phieu_luong"
        ],
        "summary": "Updates a phieu_luong",
        "description": "",
        "operationId": "updatephieu_luong",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "phieu_luong objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/phieu_luong"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "phieu_luong"
        ],
        "summary": "Deletes a phieu_luong",
        "description": "",
        "operationId": "deletephieu_luong",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "phieu_luong objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/phieu_luong"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "phieu_luong not found"
          }
        }
      }
    },
    "/api/v1/phieu_luong/findOne": {
      "get": {
        "tags": [
          "phieu_luong"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnephieu_luong",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/phieu_luong"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/phieu_luong/{phieu_luongId}/exists": {
      "get": {
        "tags": [
          "phieu_luong"
        ],
        "summary": "Check phieu_luong with provided ID exists",
        "description": "Returns a single phieu_luong",
        "operationId": "checkphieu_luongExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "phieu_luongId",
            "in": "path",
            "description": "ID of phieu_luong",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/phieu_luong/count": {
      "get": {
        "tags": [
          "phieu_luong"
        ],
        "summary": "Get phieu_luong count",
        "operationId": "getphieu_luongCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/phieu_luong/groupby/{columnName}": {
      "get": {
        "tags": [
          "phieu_luong"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "phieu_luongGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/phieu_luong"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/phieu_luong/distribution/{columnName}": {
      "get": {
        "tags": [
          "phieu_luong"
        ],
        "summary": "",
        "description": "",
        "operationId": "phieu_luongDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/phieu_luong/distinct/{columnName}": {
      "get": {
        "tags": [
          "phieu_luong"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "phieu_luongDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/phieu_luong/aggregate/{columnName}": {
      "get": {
        "tags": [
          "phieu_luong"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "phieu_luongAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/phieu_luong"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/phu_cap": {
      "post": {
        "tags": [
          "phu_cap"
        ],
        "summary": "Add a new phu_cap",
        "description": "",
        "operationId": "addphu_cap",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "phu_cap object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/phu_cap"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "phu_cap"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getphu_cap",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/phu_cap/{phu_capId}": {
      "get": {
        "tags": [
          "phu_cap"
        ],
        "summary": "Find phu_cap by ID",
        "description": "Returns a single phu_cap",
        "operationId": "getphu_capById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "phu_capId",
            "in": "path",
            "description": "ID of phu_cap to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/phu_cap"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "phu_cap not found"
          }
        }
      },
      "put": {
        "tags": [
          "phu_cap"
        ],
        "summary": "Updates a phu_cap",
        "description": "",
        "operationId": "updatephu_cap",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "phu_capId",
            "in": "path",
            "description": "ID of phu_cap to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "phu_cap object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/phu_cap"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "phu_cap"
        ],
        "summary": "Deletes a phu_cap",
        "description": "",
        "operationId": "deletephu_cap",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "phu_capId",
            "in": "path",
            "description": "ID of phu_cap to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "phu_cap not found"
          }
        }
      }
    },
    "/api/v1/phu_cap/bulk": {
      "post": {
        "tags": [
          "phu_cap"
        ],
        "summary": "Bulk phu_cap insert",
        "description": "",
        "operationId": "bulkphu_capInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "phu_cap objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/phu_cap"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "phu_cap"
        ],
        "summary": "Updates a phu_cap",
        "description": "",
        "operationId": "updatephu_cap",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "phu_cap objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/phu_cap"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "phu_cap"
        ],
        "summary": "Deletes a phu_cap",
        "description": "",
        "operationId": "deletephu_cap",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "phu_cap objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/phu_cap"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "phu_cap not found"
          }
        }
      }
    },
    "/api/v1/phu_cap/findOne": {
      "get": {
        "tags": [
          "phu_cap"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnephu_cap",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/phu_cap"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/phu_cap/{phu_capId}/exists": {
      "get": {
        "tags": [
          "phu_cap"
        ],
        "summary": "Check phu_cap with provided ID exists",
        "description": "Returns a single phu_cap",
        "operationId": "checkphu_capExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "phu_capId",
            "in": "path",
            "description": "ID of phu_cap",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/phu_cap/count": {
      "get": {
        "tags": [
          "phu_cap"
        ],
        "summary": "Get phu_cap count",
        "operationId": "getphu_capCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/phu_cap/groupby/{columnName}": {
      "get": {
        "tags": [
          "phu_cap"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "phu_capGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/phu_cap"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/phu_cap/distribution/{columnName}": {
      "get": {
        "tags": [
          "phu_cap"
        ],
        "summary": "",
        "description": "",
        "operationId": "phu_capDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/phu_cap/distinct/{columnName}": {
      "get": {
        "tags": [
          "phu_cap"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "phu_capDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/phu_cap/aggregate/{columnName}": {
      "get": {
        "tags": [
          "phu_cap"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "phu_capAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/phu_cap"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/quyet_dinh": {
      "post": {
        "tags": [
          "quyet_dinh"
        ],
        "summary": "Add a new quyet_dinh",
        "description": "",
        "operationId": "addquyet_dinh",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "quyet_dinh object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/quyet_dinh"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "quyet_dinh"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getquyet_dinh",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/quyet_dinh/{quyet_dinhId}": {
      "get": {
        "tags": [
          "quyet_dinh"
        ],
        "summary": "Find quyet_dinh by ID",
        "description": "Returns a single quyet_dinh",
        "operationId": "getquyet_dinhById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "quyet_dinhId",
            "in": "path",
            "description": "ID of quyet_dinh to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/quyet_dinh"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "quyet_dinh not found"
          }
        }
      },
      "put": {
        "tags": [
          "quyet_dinh"
        ],
        "summary": "Updates a quyet_dinh",
        "description": "",
        "operationId": "updatequyet_dinh",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "quyet_dinhId",
            "in": "path",
            "description": "ID of quyet_dinh to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "quyet_dinh object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/quyet_dinh"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "quyet_dinh"
        ],
        "summary": "Deletes a quyet_dinh",
        "description": "",
        "operationId": "deletequyet_dinh",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "quyet_dinhId",
            "in": "path",
            "description": "ID of quyet_dinh to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "quyet_dinh not found"
          }
        }
      }
    },
    "/api/v1/quyet_dinh/bulk": {
      "post": {
        "tags": [
          "quyet_dinh"
        ],
        "summary": "Bulk quyet_dinh insert",
        "description": "",
        "operationId": "bulkquyet_dinhInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "quyet_dinh objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/quyet_dinh"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "quyet_dinh"
        ],
        "summary": "Updates a quyet_dinh",
        "description": "",
        "operationId": "updatequyet_dinh",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "quyet_dinh objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/quyet_dinh"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "quyet_dinh"
        ],
        "summary": "Deletes a quyet_dinh",
        "description": "",
        "operationId": "deletequyet_dinh",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "quyet_dinh objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/quyet_dinh"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "quyet_dinh not found"
          }
        }
      }
    },
    "/api/v1/quyet_dinh/findOne": {
      "get": {
        "tags": [
          "quyet_dinh"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnequyet_dinh",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/quyet_dinh"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/quyet_dinh/{quyet_dinhId}/exists": {
      "get": {
        "tags": [
          "quyet_dinh"
        ],
        "summary": "Check quyet_dinh with provided ID exists",
        "description": "Returns a single quyet_dinh",
        "operationId": "checkquyet_dinhExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "quyet_dinhId",
            "in": "path",
            "description": "ID of quyet_dinh",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/quyet_dinh/count": {
      "get": {
        "tags": [
          "quyet_dinh"
        ],
        "summary": "Get quyet_dinh count",
        "operationId": "getquyet_dinhCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/quyet_dinh/groupby/{columnName}": {
      "get": {
        "tags": [
          "quyet_dinh"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "quyet_dinhGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/quyet_dinh"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/quyet_dinh/distribution/{columnName}": {
      "get": {
        "tags": [
          "quyet_dinh"
        ],
        "summary": "",
        "description": "",
        "operationId": "quyet_dinhDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/quyet_dinh/distinct/{columnName}": {
      "get": {
        "tags": [
          "quyet_dinh"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "quyet_dinhDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/quyet_dinh/aggregate/{columnName}": {
      "get": {
        "tags": [
          "quyet_dinh"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "quyet_dinhAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/quyet_dinh"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/tam_ung": {
      "post": {
        "tags": [
          "tam_ung"
        ],
        "summary": "Add a new tam_ung",
        "description": "",
        "operationId": "addtam_ung",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "tam_ung object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tam_ung"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "tam_ung"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "gettam_ung",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/tam_ung/{tam_ungId}": {
      "get": {
        "tags": [
          "tam_ung"
        ],
        "summary": "Find tam_ung by ID",
        "description": "Returns a single tam_ung",
        "operationId": "gettam_ungById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tam_ungId",
            "in": "path",
            "description": "ID of tam_ung to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/tam_ung"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "tam_ung not found"
          }
        }
      },
      "put": {
        "tags": [
          "tam_ung"
        ],
        "summary": "Updates a tam_ung",
        "description": "",
        "operationId": "updatetam_ung",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tam_ungId",
            "in": "path",
            "description": "ID of tam_ung to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "tam_ung object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tam_ung"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "tam_ung"
        ],
        "summary": "Deletes a tam_ung",
        "description": "",
        "operationId": "deletetam_ung",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tam_ungId",
            "in": "path",
            "description": "ID of tam_ung to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "tam_ung not found"
          }
        }
      }
    },
    "/api/v1/tam_ung/bulk": {
      "post": {
        "tags": [
          "tam_ung"
        ],
        "summary": "Bulk tam_ung insert",
        "description": "",
        "operationId": "bulktam_ungInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "tam_ung objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/tam_ung"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "tam_ung"
        ],
        "summary": "Updates a tam_ung",
        "description": "",
        "operationId": "updatetam_ung",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "tam_ung objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/tam_ung"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "tam_ung"
        ],
        "summary": "Deletes a tam_ung",
        "description": "",
        "operationId": "deletetam_ung",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "tam_ung objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/tam_ung"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "tam_ung not found"
          }
        }
      }
    },
    "/api/v1/tam_ung/findOne": {
      "get": {
        "tags": [
          "tam_ung"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnetam_ung",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/tam_ung"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/tam_ung/{tam_ungId}/exists": {
      "get": {
        "tags": [
          "tam_ung"
        ],
        "summary": "Check tam_ung with provided ID exists",
        "description": "Returns a single tam_ung",
        "operationId": "checktam_ungExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tam_ungId",
            "in": "path",
            "description": "ID of tam_ung",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/tam_ung/count": {
      "get": {
        "tags": [
          "tam_ung"
        ],
        "summary": "Get tam_ung count",
        "operationId": "gettam_ungCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/tam_ung/groupby/{columnName}": {
      "get": {
        "tags": [
          "tam_ung"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "tam_ungGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/tam_ung"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/tam_ung/distribution/{columnName}": {
      "get": {
        "tags": [
          "tam_ung"
        ],
        "summary": "",
        "description": "",
        "operationId": "tam_ungDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/tam_ung/distinct/{columnName}": {
      "get": {
        "tags": [
          "tam_ung"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "tam_ungDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/tam_ung/aggregate/{columnName}": {
      "get": {
        "tags": [
          "tam_ung"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "tam_ungAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/tam_ung"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/tang_ca": {
      "post": {
        "tags": [
          "tang_ca"
        ],
        "summary": "Add a new tang_ca",
        "description": "",
        "operationId": "addtang_ca",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "tang_ca object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tang_ca"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "tang_ca"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "gettang_ca",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/tang_ca/{tang_caId}": {
      "get": {
        "tags": [
          "tang_ca"
        ],
        "summary": "Find tang_ca by ID",
        "description": "Returns a single tang_ca",
        "operationId": "gettang_caById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tang_caId",
            "in": "path",
            "description": "ID of tang_ca to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/tang_ca"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "tang_ca not found"
          }
        }
      },
      "put": {
        "tags": [
          "tang_ca"
        ],
        "summary": "Updates a tang_ca",
        "description": "",
        "operationId": "updatetang_ca",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tang_caId",
            "in": "path",
            "description": "ID of tang_ca to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "tang_ca object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tang_ca"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "tang_ca"
        ],
        "summary": "Deletes a tang_ca",
        "description": "",
        "operationId": "deletetang_ca",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tang_caId",
            "in": "path",
            "description": "ID of tang_ca to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "tang_ca not found"
          }
        }
      }
    },
    "/api/v1/tang_ca/bulk": {
      "post": {
        "tags": [
          "tang_ca"
        ],
        "summary": "Bulk tang_ca insert",
        "description": "",
        "operationId": "bulktang_caInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "tang_ca objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/tang_ca"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "tang_ca"
        ],
        "summary": "Updates a tang_ca",
        "description": "",
        "operationId": "updatetang_ca",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "tang_ca objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/tang_ca"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "tang_ca"
        ],
        "summary": "Deletes a tang_ca",
        "description": "",
        "operationId": "deletetang_ca",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "tang_ca objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/tang_ca"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "tang_ca not found"
          }
        }
      }
    },
    "/api/v1/tang_ca/findOne": {
      "get": {
        "tags": [
          "tang_ca"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnetang_ca",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/tang_ca"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/tang_ca/{tang_caId}/exists": {
      "get": {
        "tags": [
          "tang_ca"
        ],
        "summary": "Check tang_ca with provided ID exists",
        "description": "Returns a single tang_ca",
        "operationId": "checktang_caExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tang_caId",
            "in": "path",
            "description": "ID of tang_ca",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/tang_ca/count": {
      "get": {
        "tags": [
          "tang_ca"
        ],
        "summary": "Get tang_ca count",
        "operationId": "gettang_caCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/tang_ca/groupby/{columnName}": {
      "get": {
        "tags": [
          "tang_ca"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "tang_caGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/tang_ca"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/tang_ca/distribution/{columnName}": {
      "get": {
        "tags": [
          "tang_ca"
        ],
        "summary": "",
        "description": "",
        "operationId": "tang_caDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/tang_ca/distinct/{columnName}": {
      "get": {
        "tags": [
          "tang_ca"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "tang_caDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/tang_ca/aggregate/{columnName}": {
      "get": {
        "tags": [
          "tang_ca"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "tang_caAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/tang_ca"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/trang_thai": {
      "post": {
        "tags": [
          "trang_thai"
        ],
        "summary": "Add a new trang_thai",
        "description": "",
        "operationId": "addtrang_thai",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "trang_thai object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/trang_thai"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "trang_thai"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "gettrang_thai",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/trang_thai/{trang_thaiId}": {
      "get": {
        "tags": [
          "trang_thai"
        ],
        "summary": "Find trang_thai by ID",
        "description": "Returns a single trang_thai",
        "operationId": "gettrang_thaiById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "trang_thaiId",
            "in": "path",
            "description": "ID of trang_thai to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/trang_thai"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "trang_thai not found"
          }
        }
      },
      "put": {
        "tags": [
          "trang_thai"
        ],
        "summary": "Updates a trang_thai",
        "description": "",
        "operationId": "updatetrang_thai",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "trang_thaiId",
            "in": "path",
            "description": "ID of trang_thai to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "trang_thai object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/trang_thai"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "trang_thai"
        ],
        "summary": "Deletes a trang_thai",
        "description": "",
        "operationId": "deletetrang_thai",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "trang_thaiId",
            "in": "path",
            "description": "ID of trang_thai to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "trang_thai not found"
          }
        }
      }
    },
    "/api/v1/trang_thai/bulk": {
      "post": {
        "tags": [
          "trang_thai"
        ],
        "summary": "Bulk trang_thai insert",
        "description": "",
        "operationId": "bulktrang_thaiInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "trang_thai objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/trang_thai"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "trang_thai"
        ],
        "summary": "Updates a trang_thai",
        "description": "",
        "operationId": "updatetrang_thai",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "trang_thai objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/trang_thai"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "trang_thai"
        ],
        "summary": "Deletes a trang_thai",
        "description": "",
        "operationId": "deletetrang_thai",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "trang_thai objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/trang_thai"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "trang_thai not found"
          }
        }
      }
    },
    "/api/v1/trang_thai/findOne": {
      "get": {
        "tags": [
          "trang_thai"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnetrang_thai",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/trang_thai"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/trang_thai/{trang_thaiId}/exists": {
      "get": {
        "tags": [
          "trang_thai"
        ],
        "summary": "Check trang_thai with provided ID exists",
        "description": "Returns a single trang_thai",
        "operationId": "checktrang_thaiExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "trang_thaiId",
            "in": "path",
            "description": "ID of trang_thai",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/trang_thai/count": {
      "get": {
        "tags": [
          "trang_thai"
        ],
        "summary": "Get trang_thai count",
        "operationId": "gettrang_thaiCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/trang_thai/groupby/{columnName}": {
      "get": {
        "tags": [
          "trang_thai"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "trang_thaiGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/trang_thai"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/trang_thai/distribution/{columnName}": {
      "get": {
        "tags": [
          "trang_thai"
        ],
        "summary": "",
        "description": "",
        "operationId": "trang_thaiDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/trang_thai/distinct/{columnName}": {
      "get": {
        "tags": [
          "trang_thai"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "trang_thaiDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/trang_thai/aggregate/{columnName}": {
      "get": {
        "tags": [
          "trang_thai"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "trang_thaiAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/trang_thai"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/tuyen_dung": {
      "post": {
        "tags": [
          "tuyen_dung"
        ],
        "summary": "Add a new tuyen_dung",
        "description": "",
        "operationId": "addtuyen_dung",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "tuyen_dung object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tuyen_dung"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "tuyen_dung"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "gettuyen_dung",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/tuyen_dung/{tuyen_dungId}": {
      "get": {
        "tags": [
          "tuyen_dung"
        ],
        "summary": "Find tuyen_dung by ID",
        "description": "Returns a single tuyen_dung",
        "operationId": "gettuyen_dungById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tuyen_dungId",
            "in": "path",
            "description": "ID of tuyen_dung to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/tuyen_dung"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "tuyen_dung not found"
          }
        }
      },
      "put": {
        "tags": [
          "tuyen_dung"
        ],
        "summary": "Updates a tuyen_dung",
        "description": "",
        "operationId": "updatetuyen_dung",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tuyen_dungId",
            "in": "path",
            "description": "ID of tuyen_dung to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "tuyen_dung object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tuyen_dung"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "tuyen_dung"
        ],
        "summary": "Deletes a tuyen_dung",
        "description": "",
        "operationId": "deletetuyen_dung",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tuyen_dungId",
            "in": "path",
            "description": "ID of tuyen_dung to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "tuyen_dung not found"
          }
        }
      }
    },
    "/api/v1/tuyen_dung/bulk": {
      "post": {
        "tags": [
          "tuyen_dung"
        ],
        "summary": "Bulk tuyen_dung insert",
        "description": "",
        "operationId": "bulktuyen_dungInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "tuyen_dung objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/tuyen_dung"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "tuyen_dung"
        ],
        "summary": "Updates a tuyen_dung",
        "description": "",
        "operationId": "updatetuyen_dung",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "tuyen_dung objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/tuyen_dung"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "tuyen_dung"
        ],
        "summary": "Deletes a tuyen_dung",
        "description": "",
        "operationId": "deletetuyen_dung",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "tuyen_dung objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/tuyen_dung"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "tuyen_dung not found"
          }
        }
      }
    },
    "/api/v1/tuyen_dung/findOne": {
      "get": {
        "tags": [
          "tuyen_dung"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnetuyen_dung",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/tuyen_dung"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/tuyen_dung/{tuyen_dungId}/exists": {
      "get": {
        "tags": [
          "tuyen_dung"
        ],
        "summary": "Check tuyen_dung with provided ID exists",
        "description": "Returns a single tuyen_dung",
        "operationId": "checktuyen_dungExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tuyen_dungId",
            "in": "path",
            "description": "ID of tuyen_dung",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/tuyen_dung/count": {
      "get": {
        "tags": [
          "tuyen_dung"
        ],
        "summary": "Get tuyen_dung count",
        "operationId": "gettuyen_dungCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/tuyen_dung/groupby/{columnName}": {
      "get": {
        "tags": [
          "tuyen_dung"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "tuyen_dungGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/tuyen_dung"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/tuyen_dung/distribution/{columnName}": {
      "get": {
        "tags": [
          "tuyen_dung"
        ],
        "summary": "",
        "description": "",
        "operationId": "tuyen_dungDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/tuyen_dung/distinct/{columnName}": {
      "get": {
        "tags": [
          "tuyen_dung"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "tuyen_dungDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/tuyen_dung/aggregate/{columnName}": {
      "get": {
        "tags": [
          "tuyen_dung"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "tuyen_dungAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/tuyen_dung"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/vi_tri": {
      "post": {
        "tags": [
          "vi_tri"
        ],
        "summary": "Add a new vi_tri",
        "description": "",
        "operationId": "addvi_tri",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "vi_tri object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/vi_tri"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "vi_tri"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getvi_tri",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/vi_tri/{vi_triId}": {
      "get": {
        "tags": [
          "vi_tri"
        ],
        "summary": "Find vi_tri by ID",
        "description": "Returns a single vi_tri",
        "operationId": "getvi_triById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "vi_triId",
            "in": "path",
            "description": "ID of vi_tri to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/vi_tri"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "vi_tri not found"
          }
        }
      },
      "put": {
        "tags": [
          "vi_tri"
        ],
        "summary": "Updates a vi_tri",
        "description": "",
        "operationId": "updatevi_tri",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "vi_triId",
            "in": "path",
            "description": "ID of vi_tri to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "vi_tri object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/vi_tri"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "vi_tri"
        ],
        "summary": "Deletes a vi_tri",
        "description": "",
        "operationId": "deletevi_tri",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "vi_triId",
            "in": "path",
            "description": "ID of vi_tri to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "vi_tri not found"
          }
        }
      }
    },
    "/api/v1/vi_tri/bulk": {
      "post": {
        "tags": [
          "vi_tri"
        ],
        "summary": "Bulk vi_tri insert",
        "description": "",
        "operationId": "bulkvi_triInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "vi_tri objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/vi_tri"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "vi_tri"
        ],
        "summary": "Updates a vi_tri",
        "description": "",
        "operationId": "updatevi_tri",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "vi_tri objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/vi_tri"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "vi_tri"
        ],
        "summary": "Deletes a vi_tri",
        "description": "",
        "operationId": "deletevi_tri",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "vi_tri objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/vi_tri"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "vi_tri not found"
          }
        }
      }
    },
    "/api/v1/vi_tri/findOne": {
      "get": {
        "tags": [
          "vi_tri"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnevi_tri",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/vi_tri"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/vi_tri/{vi_triId}/exists": {
      "get": {
        "tags": [
          "vi_tri"
        ],
        "summary": "Check vi_tri with provided ID exists",
        "description": "Returns a single vi_tri",
        "operationId": "checkvi_triExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "vi_triId",
            "in": "path",
            "description": "ID of vi_tri",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/vi_tri/count": {
      "get": {
        "tags": [
          "vi_tri"
        ],
        "summary": "Get vi_tri count",
        "operationId": "getvi_triCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/vi_tri/groupby/{columnName}": {
      "get": {
        "tags": [
          "vi_tri"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "vi_triGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/vi_tri"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/vi_tri/distribution/{columnName}": {
      "get": {
        "tags": [
          "vi_tri"
        ],
        "summary": "",
        "description": "",
        "operationId": "vi_triDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/vi_tri/distinct/{columnName}": {
      "get": {
        "tags": [
          "vi_tri"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "vi_triDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/vi_tri/aggregate/{columnName}": {
      "get": {
        "tags": [
          "vi_tri"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "vi_triAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/vi_tri"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    }
  },
  "definitions": {
    "userAuth": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "format": "email",
          "nullable": false,
          "example": "test@xgenecloud.com"
        },
        "password": {
          "type": "string",
          "format": "password",
          "nullable": false,
          "example": "password"
        }
      }
    },
    "user": {
      "allOf": [
        {
          "$ref": "#/definitions/userAuth"
        },
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "nullable": false,
              "readOnly": true
            },
            "firstname": {
              "type": "string",
              "nullable": false,
              "example": "FirstName"
            },
            "lastname": {
              "type": "string",
              "nullable": false,
              "example": "LastName"
            },
            "roles": {
              "type": "object",
              "readOnly": true
            },
            "created_at": {
              "type": "string",
              "readOnly": true
            },
            "updated_at": {
              "type": "string",
              "readOnly": true
            },
            "email_verified": {
              "type": "boolean",
              "readOnly": true
            }
          }
        }
      ]
    },
    "bo_phan": {
      "type": "object",
      "properties": {
        "ma": {
          "type": "integer",
          "nullable": false
        },
        "ten": {
          "type": "string"
        },
        "ngay_tao": {
          "type": "string"
        }
      }
    },
    "cap_bac": {
      "type": "object",
      "properties": {
        "ma": {
          "type": "integer",
          "nullable": false
        },
        "ten": {
          "type": "string",
          "nullable": false
        },
        "ngay_tao": {
          "type": "string"
        }
      }
    },
    "cham_cong": {
      "type": "object",
      "properties": {
        "ma": {
          "type": "integer",
          "nullable": false
        },
        "ma_nhan_vien": {
          "type": "integer",
          "nullable": false
        },
        "ngay": {
          "type": "string"
        },
        "checkin": {
          "type": "string"
        },
        "checkout": {
          "type": "string"
        }
      }
    },
    "chinh_sach": {
      "type": "object",
      "properties": {
        "ma": {
          "type": "integer",
          "nullable": false
        },
        "loai_chinh_sach": {
          "type": "string"
        },
        "link": {
          "type": "string"
        },
        "ngay_hieu_luc": {
          "type": "string"
        },
        "ngay_het_hieu_luc": {
          "type": "string"
        },
        "ngay_tao": {
          "type": "string"
        }
      }
    },
    "don_tu": {
      "type": "object",
      "properties": {
        "ma": {
          "type": "integer",
          "nullable": false
        },
        "ma_nhan_vien": {
          "type": "integer"
        },
        "ma_loai_don_tu": {
          "type": "integer"
        },
        "ngay_bat_dau": {
          "type": "string"
        },
        "ngay_ket_thuc": {
          "type": "string"
        },
        "link": {
          "type": "string"
        },
        "ngay_tao": {
          "type": "string"
        }
      }
    },
    "giay_to": {
      "type": "object",
      "properties": {
        "ma": {
          "type": "integer",
          "nullable": false
        },
        "ten": {
          "type": "string"
        },
        "ghi_chu": {
          "type": "string"
        }
      }
    },
    "he_so": {
      "type": "object",
      "properties": {
        "ma": {
          "type": "integer",
          "nullable": false
        },
        "ma_nhan_vien": {
          "type": "integer",
          "nullable": false
        },
        "ma_loai_he_so": {
          "type": "integer",
          "nullable": false
        },
        "he_so": {
          "type": "number",
          "nullable": false
        },
        "don_vi": {
          "type": "string"
        },
        "ngay_bat_dau": {
          "type": "string"
        },
        "ngay_ket_thuc": {
          "type": "string"
        },
        "ngay_tao": {
          "type": "string"
        }
      }
    },
    "ho_so_ca_nhan": {
      "type": "object",
      "properties": {
        "ma": {
          "type": "integer",
          "nullable": false
        },
        "ma_nhan_vien": {
          "type": "integer",
          "nullable": false
        },
        "ma_loai_giay_to": {
          "type": "integer"
        },
        "ngay_tao": {
          "type": "string"
        },
        "link": {
          "type": "string"
        },
        "ghi_chu": {
          "type": "string"
        }
      }
    },
    "hop_dong": {
      "type": "object",
      "properties": {
        "ma": {
          "type": "integer",
          "nullable": false
        },
        "ma_nhan_vien": {
          "type": "integer",
          "nullable": false
        },
        "ma_loai_hop_dong": {
          "type": "string"
        },
        "ngay_bat_dau": {
          "type": "string"
        },
        "ngay_ket_thuc": {
          "type": "string"
        },
        "link": {
          "type": "string"
        },
        "ghi_chu": {
          "type": "string"
        },
        "ngay_tao": {
          "type": "string"
        }
      }
    },
    "loai_don_tu": {
      "type": "object",
      "properties": {
        "ma": {
          "type": "integer",
          "nullable": false
        },
        "ten": {
          "type": "string"
        },
        "ngay_tao": {
          "type": "string"
        }
      }
    },
    "loai_he_so": {
      "type": "object",
      "properties": {
        "ma": {
          "type": "integer",
          "nullable": false
        },
        "ten": {
          "type": "string",
          "nullable": false
        },
        "mo_ta": {
          "type": "string"
        },
        "ngay_tao": {
          "type": "string"
        }
      }
    },
    "loai_hop_dong": {
      "type": "object",
      "properties": {
        "ma": {
          "type": "integer",
          "nullable": false
        },
        "ten": {
          "type": "string"
        },
        "ghi_chu": {
          "type": "string"
        },
        "ngay_tao": {
          "type": "string"
        }
      }
    },
    "loai_phu_cap": {
      "type": "object",
      "properties": {
        "ma": {
          "type": "integer",
          "nullable": false
        },
        "ten": {
          "type": "string"
        },
        "ngay_tao": {
          "type": "string"
        }
      }
    },
    "loai_quyet_dinh": {
      "type": "object",
      "properties": {
        "ma": {
          "type": "integer",
          "nullable": false
        },
        "ten": {
          "type": "string"
        },
        "mo_ta": {
          "type": "string"
        },
        "ngay_tao": {
          "type": "string"
        }
      }
    },
    "nghi_phep": {
      "type": "object",
      "properties": {
        "ma": {
          "type": "integer",
          "nullable": false
        },
        "ma_nhan_vien": {
          "type": "integer",
          "nullable": false
        },
        "tong_huong": {
          "type": "integer"
        },
        "ngay": {
          "type": "string"
        },
        "tinh_cong": {
          "type": "integer"
        },
        "ly_do": {
          "type": "string"
        },
        "ngay_tao": {
          "type": "string"
        }
      }
    },
    "nguoi_dung": {
      "type": "object",
      "properties": {
        "ma": {
          "type": "integer",
          "nullable": false
        },
        "ma_nhan_vien": {
          "type": "integer",
          "nullable": false
        },
        "ma_nhom_nguoi_dung": {
          "type": "integer",
          "nullable": false
        },
        "ten": {
          "type": "string"
        },
        "mat_khau": {
          "type": "string"
        }
      }
    },
    "nhan_vien": {
      "type": "object",
      "properties": {
        "ma": {
          "type": "integer",
          "nullable": false
        },
        "ten": {
          "type": "string",
          "nullable": false
        },
        "gioi_tinh": {
          "type": "string"
        },
        "ngay_sinh": {
          "type": "string"
        },
        "so_dien_thoai": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "dia_chi": {
          "type": "string"
        },
        "ma_bo_phan": {
          "type": "integer"
        },
        "ma_vi_tri": {
          "type": "integer"
        },
        "ma_cap_bac": {
          "type": "integer"
        },
        "ma_trang_thai": {
          "type": "integer"
        },
        "bat_dau": {
          "type": "string"
        },
        "ket_thuc": {
          "type": "string"
        },
        "ngay_tao": {
          "type": "string"
        }
      }
    },
    "nhom_nguoi_dung": {
      "type": "object",
      "properties": {
        "ma": {
          "type": "integer",
          "nullable": false
        },
        "ten": {
          "type": "string"
        },
        "ghi_chu": {
          "type": "string"
        }
      }
    },
    "phieu_danh_gia": {
      "type": "object",
      "properties": {
        "ma": {
          "type": "integer",
          "nullable": false
        },
        "ma_nhan_vien": {
          "type": "integer",
          "nullable": false
        },
        "ngay": {
          "type": "string"
        },
        "link": {
          "type": "string"
        },
        "ngay_tao": {
          "type": "string"
        }
      }
    },
    "phieu_luong": {
      "type": "object",
      "properties": {
        "ma": {
          "type": "integer",
          "nullable": false
        },
        "ma_nhan_vien": {
          "type": "integer",
          "nullable": false
        },
        "ngay": {
          "type": "string"
        },
        "link": {
          "type": "string"
        },
        "ngay_tao": {
          "type": "string"
        }
      }
    },
    "phu_cap": {
      "type": "object",
      "properties": {
        "ma": {
          "type": "integer",
          "nullable": false
        },
        "ma_nhan_vien": {
          "type": "integer",
          "nullable": false
        },
        "ma_phu_cap": {
          "type": "integer",
          "nullable": false
        },
        "ngay_bat_dau": {
          "type": "string"
        },
        "ngay_ket_thu": {
          "type": "string"
        },
        "ngay_tao": {
          "type": "string"
        }
      }
    },
    "quyet_dinh": {
      "type": "object",
      "properties": {
        "ma": {
          "type": "integer",
          "nullable": false
        },
        "ma_loai_quyet_dinh": {
          "type": "integer",
          "nullable": false
        },
        "ma_nhan_vien": {
          "type": "integer"
        },
        "ngay_hieu_luc": {
          "type": "string"
        },
        "ngay_het_hieu_luc": {
          "type": "string"
        },
        "link": {
          "type": "string"
        },
        "ngay_tao": {
          "type": "string"
        }
      }
    },
    "tam_ung": {
      "type": "object",
      "properties": {
        "ma": {
          "type": "integer",
          "nullable": false
        },
        "ma_nhan_vien": {
          "type": "integer",
          "nullable": false
        },
        "ngay_yeu_cau": {
          "type": "string"
        },
        "ngay_tam_ung": {
          "type": "string"
        },
        "link_yeu_cau": {
          "type": "string"
        },
        "link_tam_ung": {
          "type": "string"
        },
        "nguoi_tam_ung": {
          "type": "integer"
        },
        "ngay_tao": {
          "type": "string"
        }
      }
    },
    "tang_ca": {
      "type": "object",
      "properties": {
        "ma": {
          "type": "integer",
          "nullable": false
        },
        "ma_nhan_vien": {
          "type": "integer"
        },
        "ngay": {
          "type": "string"
        },
        "so_gio": {
          "type": "number"
        },
        "nguoi_xac_nhan": {
          "type": "integer"
        },
        "ghi_chu": {
          "type": "string"
        }
      }
    },
    "trang_thai": {
      "type": "object",
      "properties": {
        "ma": {
          "type": "integer",
          "nullable": false
        },
        "ten": {
          "type": "string"
        },
        "ngay_tao": {
          "type": "string"
        }
      }
    },
    "tuyen_dung": {
      "type": "object",
      "properties": {
        "ma": {
          "type": "integer",
          "nullable": false
        },
        "ma_nhan_vien": {
          "type": "integer"
        },
        "ma_bo_phan": {
          "type": "integer"
        },
        "link_ke_hoach": {
          "type": "string"
        },
        "link_yeu_cau": {
          "type": "string"
        },
        "ngay_tao": {
          "type": "string"
        }
      }
    },
    "vi_tri": {
      "type": "object",
      "properties": {
        "ma": {
          "type": "integer",
          "nullable": false
        },
        "ten": {
          "type": "string"
        },
        "ngay_tao": {
          "type": "string"
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about XgeneCloud",
    "url": "http://xgenecloud.com"
  }
}